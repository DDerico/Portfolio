
Example4_HeartBeat_Plotter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  0000231c  000023b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000231c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  008001c2  008001c2  00002472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000628  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000daf5  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000265f  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030df  00000000  00000000  00012c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001168  00000000  00000000  00015d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003aef  00000000  00000000  00016ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000566b  00000000  00000000  0001a997  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  00020002  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_16>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_18>
      4c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_19>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__vector_24>
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
      a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <__ctors_start>:
      ae:	a0 01       	movw	r20, r0
      b0:	a0 04       	cpc	r10, r0
      b2:	ad 0d       	add	r26, r13

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ec e1       	ldi	r30, 0x1C	; 28
      c8:	f3 e2       	ldi	r31, 0x23	; 35
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 3c       	cpi	r26, 0xC2	; 194
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a2 ec       	ldi	r26, 0xC2	; 194
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a1 3c       	cpi	r26, 0xC1	; 193
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	ca e5       	ldi	r28, 0x5A	; 90
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	21 97       	sbiw	r28, 0x01	; 1
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 86 11 	call	0x230c	; 0x230c <__tablejump2__>
      f6:	c7 35       	cpi	r28, 0x57	; 87
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 ce 04 	call	0x99c	; 0x99c <main>
     100:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <setup>:
int beatAvg;

MAX30105 particleSensor;

void setup()
{
     108:	cf 92       	push	r12
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     116:	26 e0       	ldi	r18, 0x06	; 6
     118:	40 e8       	ldi	r20, 0x80	; 128
     11a:	55 e2       	ldi	r21, 0x25	; 37
     11c:	60 e0       	ldi	r22, 0x00	; 0
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	86 ed       	ldi	r24, 0xD6	; 214
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);
  Serial.println("Initializing...");
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	71 e0       	ldi	r23, 0x01	; 1
     12c:	86 ed       	ldi	r24, 0xD6	; 214
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN5Print7printlnEPKc>

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
     134:	07 e5       	ldi	r16, 0x57	; 87
     136:	20 e8       	ldi	r18, 0x80	; 128
     138:	3a e1       	ldi	r19, 0x1A	; 26
     13a:	46 e0       	ldi	r20, 0x06	; 6
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	73 e0       	ldi	r23, 0x03	; 3
     142:	82 ec       	ldi	r24, 0xC2	; 194
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 a0 0a 	call	0x1540	; 0x1540 <_ZN8MAX301055beginER7TwoWiremh>
     14a:	81 11       	cpse	r24, r1
     14c:	07 c0       	rjmp	.+14     	; 0x15c <setup+0x54>
  {
    Serial.println("MAX30105 was not found. Please check wiring/power. ");
     14e:	64 e1       	ldi	r22, 0x14	; 20
     150:	71 e0       	ldi	r23, 0x01	; 1
     152:	86 ed       	ldi	r24, 0xD6	; 214
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 29 05 	call	0xa52	; 0xa52 <_ZN5Print7printlnEPKc>
     15a:	ff cf       	rjmp	.-2      	; 0x15a <setup+0x52>
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  int sampleRate = 400; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200 //400 on Ex. 5
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
     15c:	c1 2c       	mov	r12, r1
     15e:	80 e1       	ldi	r24, 0x10	; 16
     160:	d8 2e       	mov	r13, r24
     162:	9b e9       	ldi	r25, 0x9B	; 155
     164:	e9 2e       	mov	r14, r25
     166:	ff 24       	eor	r15, r15
     168:	f3 94       	inc	r15
     16a:	00 e9       	ldi	r16, 0x90	; 144
     16c:	11 e0       	ldi	r17, 0x01	; 1
     16e:	22 e0       	ldi	r18, 0x02	; 2
     170:	44 e0       	ldi	r20, 0x04	; 4
     172:	6f e1       	ldi	r22, 0x1F	; 31
     174:	82 ec       	ldi	r24, 0xC2	; 194
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN8MAX301055setupEhhhiii>
     17c:	c0 e4       	ldi	r28, 0x40	; 64
  //Take an average of IR readings at power up
  const byte avgAmount = 64;
  long baseValue = 0;
  for (byte x = 0 ; x < avgAmount ; x++)
  {
    baseValue += particleSensor.getIR(); //Read the IR value
     17e:	82 ec       	ldi	r24, 0xC2	; 194
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN8MAX301055getIREv>
     186:	c1 50       	subi	r28, 0x01	; 1
  //the plotter with 500 of an average reading from the sensor

  //Take an average of IR readings at power up
  const byte avgAmount = 64;
  long baseValue = 0;
  for (byte x = 0 ; x < avgAmount ; x++)
     188:	d1 f7       	brne	.-12     	; 0x17e <setup+0x76>
  baseValue /= avgAmount;

  //Pre-populate the plotter so that the Y scale is close to IR values
  /*for (int x = 0 ; x < 500 ; x++)
    Serial.println(baseValue);*/
}
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	0f 91       	pop	r16
     190:	ff 90       	pop	r15
     192:	ef 90       	pop	r14
     194:	df 90       	pop	r13
     196:	cf 90       	pop	r12
     198:	08 95       	ret

0000019a <loop>:

void loop()
{
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
	  long irValue = particleSensor.getIR();
     1b0:	82 ec       	ldi	r24, 0xC2	; 194
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN8MAX301055getIREv>
     1b8:	6b 01       	movw	r12, r22
     1ba:	7c 01       	movw	r14, r24

	  if (checkForBeat(irValue) == true)
     1bc:	0e 94 56 08 	call	0x10ac	; 0x10ac <_Z12checkForBeatl>
     1c0:	88 23       	and	r24, r24
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <loop+0x2c>
     1c4:	6f c0       	rjmp	.+222    	; 0x2a4 <loop+0x10a>
	  {
		  //We sensed a beat!
		  long delta = millis() - lastBeat;
     1c6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <millis>
     1ca:	00 91 cd 01 	lds	r16, 0x01CD	; 0x8001cd <lastBeat>
     1ce:	10 91 ce 01 	lds	r17, 0x01CE	; 0x8001ce <lastBeat+0x1>
     1d2:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <lastBeat+0x2>
     1d6:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <lastBeat+0x3>
     1da:	4b 01       	movw	r8, r22
     1dc:	5c 01       	movw	r10, r24
     1de:	80 1a       	sub	r8, r16
     1e0:	91 0a       	sbc	r9, r17
     1e2:	a2 0a       	sbc	r10, r18
     1e4:	b3 0a       	sbc	r11, r19
		  lastBeat = millis();
     1e6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <millis>
     1ea:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <lastBeat>
     1ee:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <lastBeat+0x1>
     1f2:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <lastBeat+0x2>
     1f6:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <lastBeat+0x3>

		  beatsPerMinute = 60 / (delta / 1000.0);
     1fa:	c5 01       	movw	r24, r10
     1fc:	b4 01       	movw	r22, r8
     1fe:	0e 94 4c 02 	call	0x498	; 0x498 <__floatsisf>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	4a e7       	ldi	r20, 0x7A	; 122
     208:	54 e4       	ldi	r21, 0x44	; 68
     20a:	0e 94 a9 01 	call	0x352	; 0x352 <__divsf3>
     20e:	9b 01       	movw	r18, r22
     210:	ac 01       	movw	r20, r24
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 e7       	ldi	r24, 0x70	; 112
     218:	92 e4       	ldi	r25, 0x42	; 66
     21a:	0e 94 a9 01 	call	0x352	; 0x352 <__divsf3>
     21e:	4b 01       	movw	r8, r22
     220:	5c 01       	movw	r10, r24
     222:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <beatsPerMinute>
     226:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <beatsPerMinute+0x1>
     22a:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <beatsPerMinute+0x2>
     22e:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <beatsPerMinute+0x3>

		  if (beatsPerMinute < 255 && beatsPerMinute > 20)
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	4f e7       	ldi	r20, 0x7F	; 127
     238:	53 e4       	ldi	r21, 0x43	; 67
     23a:	0e 94 a4 01 	call	0x348	; 0x348 <__cmpsf2>
     23e:	87 ff       	sbrs	r24, 7
     240:	31 c0       	rjmp	.+98     	; 0x2a4 <loop+0x10a>
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 ea       	ldi	r20, 0xA0	; 160
     248:	51 e4       	ldi	r21, 0x41	; 65
     24a:	c5 01       	movw	r24, r10
     24c:	b4 01       	movw	r22, r8
     24e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__gesf2>
     252:	18 16       	cp	r1, r24
     254:	3c f5       	brge	.+78     	; 0x2a4 <loop+0x10a>
		  {
			  rates[rateSpot++] = (byte)beatsPerMinute; //Store this reading in the array
     256:	c0 91 d1 01 	lds	r28, 0x01D1	; 0x8001d1 <rateSpot>
     25a:	0c 2f       	mov	r16, r28
     25c:	10 e0       	ldi	r17, 0x00	; 0
     25e:	0e 52       	subi	r16, 0x2E	; 46
     260:	1e 4f       	sbci	r17, 0xFE	; 254
     262:	c5 01       	movw	r24, r10
     264:	b4 01       	movw	r22, r8
     266:	0e 94 1b 02 	call	0x436	; 0x436 <__fixunssfsi>
     26a:	f8 01       	movw	r30, r16
     26c:	60 83       	st	Z, r22
			  rateSpot %= RATE_SIZE; //Wrap variable
     26e:	cf 5f       	subi	r28, 0xFF	; 255
     270:	c3 70       	andi	r28, 0x03	; 3
     272:	c0 93 d1 01 	sts	0x01D1, r28	; 0x8001d1 <rateSpot>

			  //Take average of readings
			  beatAvg = 0;
			  for (byte x = 0 ; x < RATE_SIZE ; x++)
			  beatAvg += rates[x];
			  beatAvg /= RATE_SIZE;
     276:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <rates>
     27a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <rates+0x1>
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	82 0f       	add	r24, r18
     282:	91 1d       	adc	r25, r1
     284:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <rates+0x2>
     288:	82 0f       	add	r24, r18
     28a:	91 1d       	adc	r25, r1
     28c:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <rates+0x3>
     290:	82 0f       	add	r24, r18
     292:	91 1d       	adc	r25, r1
     294:	95 95       	asr	r25
     296:	87 95       	ror	r24
     298:	95 95       	asr	r25
     29a:	87 95       	ror	r24
     29c:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <beatAvg+0x1>
     2a0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <beatAvg>
		  }
	  }
    Serial.print("IR=");
     2a4:	68 e4       	ldi	r22, 0x48	; 72
     2a6:	71 e0       	ldi	r23, 0x01	; 1
     2a8:	86 ed       	ldi	r24, 0xD6	; 214
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN5Print5printEPKc>
    Serial.print(irValue);
     2b0:	2a e0       	ldi	r18, 0x0A	; 10
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	b7 01       	movw	r22, r14
     2b6:	a6 01       	movw	r20, r12
     2b8:	86 ed       	ldi	r24, 0xD6	; 214
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN5Print5printEli>
    Serial.print(", BPM=");
     2c0:	6c e4       	ldi	r22, 0x4C	; 76
     2c2:	71 e0       	ldi	r23, 0x01	; 1
     2c4:	86 ed       	ldi	r24, 0xD6	; 214
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN5Print5printEPKc>
    Serial.print(beatsPerMinute);
     2cc:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <beatsPerMinute>
     2d0:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <beatsPerMinute+0x1>
     2d4:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <beatsPerMinute+0x2>
     2d8:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <beatsPerMinute+0x3>
     2dc:	22 e0       	ldi	r18, 0x02	; 2
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	86 ed       	ldi	r24, 0xD6	; 214
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN5Print5printEdi>
    Serial.print(", Avg BPM(RR Interval)=");
     2e8:	63 e5       	ldi	r22, 0x53	; 83
     2ea:	71 e0       	ldi	r23, 0x01	; 1
     2ec:	86 ed       	ldi	r24, 0xD6	; 214
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN5Print5printEPKc>
    Serial.print(beatAvg);
     2f4:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <beatAvg>
     2f8:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <beatAvg+0x1>
     2fc:	4a e0       	ldi	r20, 0x0A	; 10
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	86 ed       	ldi	r24, 0xD6	; 214
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN5Print5printEii>

    if (irValue < 50000)
     308:	f0 e5       	ldi	r31, 0x50	; 80
     30a:	cf 16       	cp	r12, r31
     30c:	f3 ec       	ldi	r31, 0xC3	; 195
     30e:	df 06       	cpc	r13, r31
     310:	e1 04       	cpc	r14, r1
     312:	f1 04       	cpc	r15, r1
     314:	34 f4       	brge	.+12     	; 0x322 <loop+0x188>
    Serial.print(" No finger?");
     316:	6b e6       	ldi	r22, 0x6B	; 107
     318:	71 e0       	ldi	r23, 0x01	; 1
     31a:	86 ed       	ldi	r24, 0xD6	; 214
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 1c 05 	call	0xa38	; 0xa38 <_ZN5Print5printEPKc>

    Serial.println();
     322:	86 ed       	ldi	r24, 0xD6	; 214
     324:	91 e0       	ldi	r25, 0x01	; 1
  //Serial.println(particleSensor.getIR()); //Send raw data to plotter
}
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	ff 90       	pop	r15
     32e:	ef 90       	pop	r14
     330:	df 90       	pop	r13
     332:	cf 90       	pop	r12
     334:	bf 90       	pop	r11
     336:	af 90       	pop	r10
     338:	9f 90       	pop	r9
     33a:	8f 90       	pop	r8
    Serial.print(beatAvg);

    if (irValue < 50000)
    Serial.print(" No finger?");

    Serial.println();
     33c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <_ZN5Print7printlnEv>

00000340 <_GLOBAL__sub_I_rates>:
long lastBeat = 0; //Time at which the last beat occurred

float beatsPerMinute;
int beatAvg;

MAX30105 particleSensor;
     340:	82 ec       	ldi	r24, 0xC2	; 194
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <_ZN8MAX30105C1Ev>

00000348 <__cmpsf2>:
     348:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_cmp>
     34c:	08 f4       	brcc	.+2      	; 0x350 <__cmpsf2+0x8>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	08 95       	ret

00000352 <__divsf3>:
     352:	0e 94 bd 01 	call	0x37a	; 0x37a <__divsf3x>
     356:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_round>
     35a:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscB>
     35e:	58 f0       	brcs	.+22     	; 0x376 <__divsf3+0x24>
     360:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscA>
     364:	40 f0       	brcs	.+16     	; 0x376 <__divsf3+0x24>
     366:	29 f4       	brne	.+10     	; 0x372 <__divsf3+0x20>
     368:	5f 3f       	cpi	r21, 0xFF	; 255
     36a:	29 f0       	breq	.+10     	; 0x376 <__divsf3+0x24>
     36c:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
     370:	51 11       	cpse	r21, r1
     372:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_szero>
     376:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_nan>

0000037a <__divsf3x>:
     37a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_split3>
     37e:	68 f3       	brcs	.-38     	; 0x35a <__divsf3+0x8>

00000380 <__divsf3_pse>:
     380:	99 23       	and	r25, r25
     382:	b1 f3       	breq	.-20     	; 0x370 <__divsf3+0x1e>
     384:	55 23       	and	r21, r21
     386:	91 f3       	breq	.-28     	; 0x36c <__divsf3+0x1a>
     388:	95 1b       	sub	r25, r21
     38a:	55 0b       	sbc	r21, r21
     38c:	bb 27       	eor	r27, r27
     38e:	aa 27       	eor	r26, r26
     390:	62 17       	cp	r22, r18
     392:	73 07       	cpc	r23, r19
     394:	84 07       	cpc	r24, r20
     396:	38 f0       	brcs	.+14     	; 0x3a6 <__divsf3_pse+0x26>
     398:	9f 5f       	subi	r25, 0xFF	; 255
     39a:	5f 4f       	sbci	r21, 0xFF	; 255
     39c:	22 0f       	add	r18, r18
     39e:	33 1f       	adc	r19, r19
     3a0:	44 1f       	adc	r20, r20
     3a2:	aa 1f       	adc	r26, r26
     3a4:	a9 f3       	breq	.-22     	; 0x390 <__divsf3_pse+0x10>
     3a6:	35 d0       	rcall	.+106    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3a8:	0e 2e       	mov	r0, r30
     3aa:	3a f0       	brmi	.+14     	; 0x3ba <__divsf3_pse+0x3a>
     3ac:	e0 e8       	ldi	r30, 0x80	; 128
     3ae:	32 d0       	rcall	.+100    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3b0:	91 50       	subi	r25, 0x01	; 1
     3b2:	50 40       	sbci	r21, 0x00	; 0
     3b4:	e6 95       	lsr	r30
     3b6:	00 1c       	adc	r0, r0
     3b8:	ca f7       	brpl	.-14     	; 0x3ac <__divsf3_pse+0x2c>
     3ba:	2b d0       	rcall	.+86     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3bc:	fe 2f       	mov	r31, r30
     3be:	29 d0       	rcall	.+82     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3c0:	66 0f       	add	r22, r22
     3c2:	77 1f       	adc	r23, r23
     3c4:	88 1f       	adc	r24, r24
     3c6:	bb 1f       	adc	r27, r27
     3c8:	26 17       	cp	r18, r22
     3ca:	37 07       	cpc	r19, r23
     3cc:	48 07       	cpc	r20, r24
     3ce:	ab 07       	cpc	r26, r27
     3d0:	b0 e8       	ldi	r27, 0x80	; 128
     3d2:	09 f0       	breq	.+2      	; 0x3d6 <__divsf3_pse+0x56>
     3d4:	bb 0b       	sbc	r27, r27
     3d6:	80 2d       	mov	r24, r0
     3d8:	bf 01       	movw	r22, r30
     3da:	ff 27       	eor	r31, r31
     3dc:	93 58       	subi	r25, 0x83	; 131
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	3a f0       	brmi	.+14     	; 0x3f0 <__divsf3_pse+0x70>
     3e2:	9e 3f       	cpi	r25, 0xFE	; 254
     3e4:	51 05       	cpc	r21, r1
     3e6:	78 f0       	brcs	.+30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3e8:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
     3ec:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_szero>
     3f0:	5f 3f       	cpi	r21, 0xFF	; 255
     3f2:	e4 f3       	brlt	.-8      	; 0x3ec <__divsf3_pse+0x6c>
     3f4:	98 3e       	cpi	r25, 0xE8	; 232
     3f6:	d4 f3       	brlt	.-12     	; 0x3ec <__divsf3_pse+0x6c>
     3f8:	86 95       	lsr	r24
     3fa:	77 95       	ror	r23
     3fc:	67 95       	ror	r22
     3fe:	b7 95       	ror	r27
     400:	f7 95       	ror	r31
     402:	9f 5f       	subi	r25, 0xFF	; 255
     404:	c9 f7       	brne	.-14     	; 0x3f8 <__divsf3_pse+0x78>
     406:	88 0f       	add	r24, r24
     408:	91 1d       	adc	r25, r1
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	97 f9       	bld	r25, 7
     410:	08 95       	ret
     412:	e1 e0       	ldi	r30, 0x01	; 1
     414:	66 0f       	add	r22, r22
     416:	77 1f       	adc	r23, r23
     418:	88 1f       	adc	r24, r24
     41a:	bb 1f       	adc	r27, r27
     41c:	62 17       	cp	r22, r18
     41e:	73 07       	cpc	r23, r19
     420:	84 07       	cpc	r24, r20
     422:	ba 07       	cpc	r27, r26
     424:	20 f0       	brcs	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     426:	62 1b       	sub	r22, r18
     428:	73 0b       	sbc	r23, r19
     42a:	84 0b       	sbc	r24, r20
     42c:	ba 0b       	sbc	r27, r26
     42e:	ee 1f       	adc	r30, r30
     430:	88 f7       	brcc	.-30     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     432:	e0 95       	com	r30
     434:	08 95       	ret

00000436 <__fixunssfsi>:
     436:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fp_splitA>
     43a:	88 f0       	brcs	.+34     	; 0x45e <__fixunssfsi+0x28>
     43c:	9f 57       	subi	r25, 0x7F	; 127
     43e:	98 f0       	brcs	.+38     	; 0x466 <__fixunssfsi+0x30>
     440:	b9 2f       	mov	r27, r25
     442:	99 27       	eor	r25, r25
     444:	b7 51       	subi	r27, 0x17	; 23
     446:	b0 f0       	brcs	.+44     	; 0x474 <__fixunssfsi+0x3e>
     448:	e1 f0       	breq	.+56     	; 0x482 <__fixunssfsi+0x4c>
     44a:	66 0f       	add	r22, r22
     44c:	77 1f       	adc	r23, r23
     44e:	88 1f       	adc	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	1a f0       	brmi	.+6      	; 0x45a <__fixunssfsi+0x24>
     454:	ba 95       	dec	r27
     456:	c9 f7       	brne	.-14     	; 0x44a <__fixunssfsi+0x14>
     458:	14 c0       	rjmp	.+40     	; 0x482 <__fixunssfsi+0x4c>
     45a:	b1 30       	cpi	r27, 0x01	; 1
     45c:	91 f0       	breq	.+36     	; 0x482 <__fixunssfsi+0x4c>
     45e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__fp_zero>
     462:	b1 e0       	ldi	r27, 0x01	; 1
     464:	08 95       	ret
     466:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_zero>
     46a:	67 2f       	mov	r22, r23
     46c:	78 2f       	mov	r23, r24
     46e:	88 27       	eor	r24, r24
     470:	b8 5f       	subi	r27, 0xF8	; 248
     472:	39 f0       	breq	.+14     	; 0x482 <__fixunssfsi+0x4c>
     474:	b9 3f       	cpi	r27, 0xF9	; 249
     476:	cc f3       	brlt	.-14     	; 0x46a <__fixunssfsi+0x34>
     478:	86 95       	lsr	r24
     47a:	77 95       	ror	r23
     47c:	67 95       	ror	r22
     47e:	b3 95       	inc	r27
     480:	d9 f7       	brne	.-10     	; 0x478 <__fixunssfsi+0x42>
     482:	3e f4       	brtc	.+14     	; 0x492 <__fixunssfsi+0x5c>
     484:	90 95       	com	r25
     486:	80 95       	com	r24
     488:	70 95       	com	r23
     48a:	61 95       	neg	r22
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	8f 4f       	sbci	r24, 0xFF	; 255
     490:	9f 4f       	sbci	r25, 0xFF	; 255
     492:	08 95       	ret

00000494 <__floatunsisf>:
     494:	e8 94       	clt
     496:	09 c0       	rjmp	.+18     	; 0x4aa <__floatsisf+0x12>

00000498 <__floatsisf>:
     498:	97 fb       	bst	r25, 7
     49a:	3e f4       	brtc	.+14     	; 0x4aa <__floatsisf+0x12>
     49c:	90 95       	com	r25
     49e:	80 95       	com	r24
     4a0:	70 95       	com	r23
     4a2:	61 95       	neg	r22
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	8f 4f       	sbci	r24, 0xFF	; 255
     4a8:	9f 4f       	sbci	r25, 0xFF	; 255
     4aa:	99 23       	and	r25, r25
     4ac:	a9 f0       	breq	.+42     	; 0x4d8 <__floatsisf+0x40>
     4ae:	f9 2f       	mov	r31, r25
     4b0:	96 e9       	ldi	r25, 0x96	; 150
     4b2:	bb 27       	eor	r27, r27
     4b4:	93 95       	inc	r25
     4b6:	f6 95       	lsr	r31
     4b8:	87 95       	ror	r24
     4ba:	77 95       	ror	r23
     4bc:	67 95       	ror	r22
     4be:	b7 95       	ror	r27
     4c0:	f1 11       	cpse	r31, r1
     4c2:	f8 cf       	rjmp	.-16     	; 0x4b4 <__floatsisf+0x1c>
     4c4:	fa f4       	brpl	.+62     	; 0x504 <__floatsisf+0x6c>
     4c6:	bb 0f       	add	r27, r27
     4c8:	11 f4       	brne	.+4      	; 0x4ce <__floatsisf+0x36>
     4ca:	60 ff       	sbrs	r22, 0
     4cc:	1b c0       	rjmp	.+54     	; 0x504 <__floatsisf+0x6c>
     4ce:	6f 5f       	subi	r22, 0xFF	; 255
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	8f 4f       	sbci	r24, 0xFF	; 255
     4d4:	9f 4f       	sbci	r25, 0xFF	; 255
     4d6:	16 c0       	rjmp	.+44     	; 0x504 <__floatsisf+0x6c>
     4d8:	88 23       	and	r24, r24
     4da:	11 f0       	breq	.+4      	; 0x4e0 <__floatsisf+0x48>
     4dc:	96 e9       	ldi	r25, 0x96	; 150
     4de:	11 c0       	rjmp	.+34     	; 0x502 <__floatsisf+0x6a>
     4e0:	77 23       	and	r23, r23
     4e2:	21 f0       	breq	.+8      	; 0x4ec <__floatsisf+0x54>
     4e4:	9e e8       	ldi	r25, 0x8E	; 142
     4e6:	87 2f       	mov	r24, r23
     4e8:	76 2f       	mov	r23, r22
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <__floatsisf+0x5e>
     4ec:	66 23       	and	r22, r22
     4ee:	71 f0       	breq	.+28     	; 0x50c <__floatsisf+0x74>
     4f0:	96 e8       	ldi	r25, 0x86	; 134
     4f2:	86 2f       	mov	r24, r22
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	2a f0       	brmi	.+10     	; 0x504 <__floatsisf+0x6c>
     4fa:	9a 95       	dec	r25
     4fc:	66 0f       	add	r22, r22
     4fe:	77 1f       	adc	r23, r23
     500:	88 1f       	adc	r24, r24
     502:	da f7       	brpl	.-10     	; 0x4fa <__floatsisf+0x62>
     504:	88 0f       	add	r24, r24
     506:	96 95       	lsr	r25
     508:	87 95       	ror	r24
     50a:	97 f9       	bld	r25, 7
     50c:	08 95       	ret

0000050e <__fp_cmp>:
     50e:	99 0f       	add	r25, r25
     510:	00 08       	sbc	r0, r0
     512:	55 0f       	add	r21, r21
     514:	aa 0b       	sbc	r26, r26
     516:	e0 e8       	ldi	r30, 0x80	; 128
     518:	fe ef       	ldi	r31, 0xFE	; 254
     51a:	16 16       	cp	r1, r22
     51c:	17 06       	cpc	r1, r23
     51e:	e8 07       	cpc	r30, r24
     520:	f9 07       	cpc	r31, r25
     522:	c0 f0       	brcs	.+48     	; 0x554 <__fp_cmp+0x46>
     524:	12 16       	cp	r1, r18
     526:	13 06       	cpc	r1, r19
     528:	e4 07       	cpc	r30, r20
     52a:	f5 07       	cpc	r31, r21
     52c:	98 f0       	brcs	.+38     	; 0x554 <__fp_cmp+0x46>
     52e:	62 1b       	sub	r22, r18
     530:	73 0b       	sbc	r23, r19
     532:	84 0b       	sbc	r24, r20
     534:	95 0b       	sbc	r25, r21
     536:	39 f4       	brne	.+14     	; 0x546 <__fp_cmp+0x38>
     538:	0a 26       	eor	r0, r26
     53a:	61 f0       	breq	.+24     	; 0x554 <__fp_cmp+0x46>
     53c:	23 2b       	or	r18, r19
     53e:	24 2b       	or	r18, r20
     540:	25 2b       	or	r18, r21
     542:	21 f4       	brne	.+8      	; 0x54c <__fp_cmp+0x3e>
     544:	08 95       	ret
     546:	0a 26       	eor	r0, r26
     548:	09 f4       	brne	.+2      	; 0x54c <__fp_cmp+0x3e>
     54a:	a1 40       	sbci	r26, 0x01	; 1
     54c:	a6 95       	lsr	r26
     54e:	8f ef       	ldi	r24, 0xFF	; 255
     550:	81 1d       	adc	r24, r1
     552:	81 1d       	adc	r24, r1
     554:	08 95       	ret

00000556 <__fp_inf>:
     556:	97 f9       	bld	r25, 7
     558:	9f 67       	ori	r25, 0x7F	; 127
     55a:	80 e8       	ldi	r24, 0x80	; 128
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	08 95       	ret

00000562 <__fp_nan>:
     562:	9f ef       	ldi	r25, 0xFF	; 255
     564:	80 ec       	ldi	r24, 0xC0	; 192
     566:	08 95       	ret

00000568 <__fp_pscA>:
     568:	00 24       	eor	r0, r0
     56a:	0a 94       	dec	r0
     56c:	16 16       	cp	r1, r22
     56e:	17 06       	cpc	r1, r23
     570:	18 06       	cpc	r1, r24
     572:	09 06       	cpc	r0, r25
     574:	08 95       	ret

00000576 <__fp_pscB>:
     576:	00 24       	eor	r0, r0
     578:	0a 94       	dec	r0
     57a:	12 16       	cp	r1, r18
     57c:	13 06       	cpc	r1, r19
     57e:	14 06       	cpc	r1, r20
     580:	05 06       	cpc	r0, r21
     582:	08 95       	ret

00000584 <__fp_round>:
     584:	09 2e       	mov	r0, r25
     586:	03 94       	inc	r0
     588:	00 0c       	add	r0, r0
     58a:	11 f4       	brne	.+4      	; 0x590 <__fp_round+0xc>
     58c:	88 23       	and	r24, r24
     58e:	52 f0       	brmi	.+20     	; 0x5a4 <__fp_round+0x20>
     590:	bb 0f       	add	r27, r27
     592:	40 f4       	brcc	.+16     	; 0x5a4 <__fp_round+0x20>
     594:	bf 2b       	or	r27, r31
     596:	11 f4       	brne	.+4      	; 0x59c <__fp_round+0x18>
     598:	60 ff       	sbrs	r22, 0
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <__fp_round+0x20>
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	8f 4f       	sbci	r24, 0xFF	; 255
     5a2:	9f 4f       	sbci	r25, 0xFF	; 255
     5a4:	08 95       	ret

000005a6 <__fp_split3>:
     5a6:	57 fd       	sbrc	r21, 7
     5a8:	90 58       	subi	r25, 0x80	; 128
     5aa:	44 0f       	add	r20, r20
     5ac:	55 1f       	adc	r21, r21
     5ae:	59 f0       	breq	.+22     	; 0x5c6 <__fp_splitA+0x10>
     5b0:	5f 3f       	cpi	r21, 0xFF	; 255
     5b2:	71 f0       	breq	.+28     	; 0x5d0 <__fp_splitA+0x1a>
     5b4:	47 95       	ror	r20

000005b6 <__fp_splitA>:
     5b6:	88 0f       	add	r24, r24
     5b8:	97 fb       	bst	r25, 7
     5ba:	99 1f       	adc	r25, r25
     5bc:	61 f0       	breq	.+24     	; 0x5d6 <__fp_splitA+0x20>
     5be:	9f 3f       	cpi	r25, 0xFF	; 255
     5c0:	79 f0       	breq	.+30     	; 0x5e0 <__fp_splitA+0x2a>
     5c2:	87 95       	ror	r24
     5c4:	08 95       	ret
     5c6:	12 16       	cp	r1, r18
     5c8:	13 06       	cpc	r1, r19
     5ca:	14 06       	cpc	r1, r20
     5cc:	55 1f       	adc	r21, r21
     5ce:	f2 cf       	rjmp	.-28     	; 0x5b4 <__fp_split3+0xe>
     5d0:	46 95       	lsr	r20
     5d2:	f1 df       	rcall	.-30     	; 0x5b6 <__fp_splitA>
     5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <__fp_splitA+0x30>
     5d6:	16 16       	cp	r1, r22
     5d8:	17 06       	cpc	r1, r23
     5da:	18 06       	cpc	r1, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	f1 cf       	rjmp	.-30     	; 0x5c2 <__fp_splitA+0xc>
     5e0:	86 95       	lsr	r24
     5e2:	71 05       	cpc	r23, r1
     5e4:	61 05       	cpc	r22, r1
     5e6:	08 94       	sec
     5e8:	08 95       	ret

000005ea <__fp_zero>:
     5ea:	e8 94       	clt

000005ec <__fp_szero>:
     5ec:	bb 27       	eor	r27, r27
     5ee:	66 27       	eor	r22, r22
     5f0:	77 27       	eor	r23, r23
     5f2:	cb 01       	movw	r24, r22
     5f4:	97 f9       	bld	r25, 7
     5f6:	08 95       	ret

000005f8 <__gesf2>:
     5f8:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_cmp>
     5fc:	08 f4       	brcc	.+2      	; 0x600 <__gesf2+0x8>
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	08 95       	ret

00000602 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     602:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     604:	91 8d       	ldd	r25, Z+25	; 0x19
     606:	22 8d       	ldd	r18, Z+26	; 0x1a
     608:	89 2f       	mov	r24, r25
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	80 5c       	subi	r24, 0xC0	; 192
     60e:	9f 4f       	sbci	r25, 0xFF	; 255
     610:	82 1b       	sub	r24, r18
     612:	91 09       	sbc	r25, r1
}
     614:	8f 73       	andi	r24, 0x3F	; 63
     616:	99 27       	eor	r25, r25
     618:	08 95       	ret

0000061a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     61a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     61c:	91 8d       	ldd	r25, Z+25	; 0x19
     61e:	82 8d       	ldd	r24, Z+26	; 0x1a
     620:	98 17       	cp	r25, r24
     622:	31 f0       	breq	.+12     	; 0x630 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     624:	82 8d       	ldd	r24, Z+26	; 0x1a
     626:	e8 0f       	add	r30, r24
     628:	f1 1d       	adc	r31, r1
     62a:	85 8d       	ldd	r24, Z+29	; 0x1d
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     634:	08 95       	ret

00000636 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     636:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     638:	91 8d       	ldd	r25, Z+25	; 0x19
     63a:	82 8d       	ldd	r24, Z+26	; 0x1a
     63c:	98 17       	cp	r25, r24
     63e:	61 f0       	breq	.+24     	; 0x658 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     640:	82 8d       	ldd	r24, Z+26	; 0x1a
     642:	df 01       	movw	r26, r30
     644:	a8 0f       	add	r26, r24
     646:	b1 1d       	adc	r27, r1
     648:	5d 96       	adiw	r26, 0x1d	; 29
     64a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     64c:	92 8d       	ldd	r25, Z+26	; 0x1a
     64e:	9f 5f       	subi	r25, 0xFF	; 255
     650:	9f 73       	andi	r25, 0x3F	; 63
     652:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     65c:	08 95       	ret

0000065e <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     65e:	fc 01       	movw	r30, r24
     660:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     662:	44 8d       	ldd	r20, Z+28	; 0x1c
     664:	25 2f       	mov	r18, r21
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	84 2f       	mov	r24, r20
     66a:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     66c:	82 1b       	sub	r24, r18
     66e:	93 0b       	sbc	r25, r19
     670:	54 17       	cp	r21, r20
     672:	10 f0       	brcs	.+4      	; 0x678 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     674:	cf 96       	adiw	r24, 0x3f	; 63
     676:	08 95       	ret
  return tail - head - 1;
     678:	01 97       	sbiw	r24, 0x01	; 1
}
     67a:	08 95       	ret

0000067c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     67c:	86 e9       	ldi	r24, 0x96	; 150
     67e:	94 e0       	ldi	r25, 0x04	; 4
     680:	89 2b       	or	r24, r25
     682:	49 f0       	breq	.+18     	; 0x696 <_Z14serialEventRunv+0x1a>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	89 2b       	or	r24, r25
     68a:	29 f0       	breq	.+10     	; 0x696 <_Z14serialEventRunv+0x1a>
     68c:	0e 94 96 04 	call	0x92c	; 0x92c <_Z17Serial0_availablev>
     690:	81 11       	cpse	r24, r1
     692:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     696:	08 95       	ret

00000698 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     698:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     69a:	84 8d       	ldd	r24, Z+28	; 0x1c
     69c:	df 01       	movw	r26, r30
     69e:	a8 0f       	add	r26, r24
     6a0:	b1 1d       	adc	r27, r1
     6a2:	a3 5a       	subi	r26, 0xA3	; 163
     6a4:	bf 4f       	sbci	r27, 0xFF	; 255
     6a6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     6a8:	84 8d       	ldd	r24, Z+28	; 0x1c
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	8f 73       	andi	r24, 0x3F	; 63
     6b0:	99 27       	eor	r25, r25
     6b2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     6b4:	a6 89       	ldd	r26, Z+22	; 0x16
     6b6:	b7 89       	ldd	r27, Z+23	; 0x17
     6b8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     6ba:	a0 89       	ldd	r26, Z+16	; 0x10
     6bc:	b1 89       	ldd	r27, Z+17	; 0x11
     6be:	8c 91       	ld	r24, X
     6c0:	80 64       	ori	r24, 0x40	; 64
     6c2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     6c4:	93 8d       	ldd	r25, Z+27	; 0x1b
     6c6:	84 8d       	ldd	r24, Z+28	; 0x1c
     6c8:	98 13       	cpse	r25, r24
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     6cc:	02 88       	ldd	r0, Z+18	; 0x12
     6ce:	f3 89       	ldd	r31, Z+19	; 0x13
     6d0:	e0 2d       	mov	r30, r0
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 7d       	andi	r24, 0xDF	; 223
     6d6:	80 83       	st	Z, r24
     6d8:	08 95       	ret

000006da <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
  _written = true;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     6ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6f0:	98 13       	cpse	r25, r24
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <_ZN14HardwareSerial5writeEh+0x24>
     6f4:	e8 89       	ldd	r30, Y+16	; 0x10
     6f6:	f9 89       	ldd	r31, Y+17	; 0x11
     6f8:	80 81       	ld	r24, Z
     6fa:	85 fd       	sbrc	r24, 5
     6fc:	24 c0       	rjmp	.+72     	; 0x746 <_ZN14HardwareSerial5writeEh+0x6c>
     6fe:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     700:	0b 8d       	ldd	r16, Y+27	; 0x1b
     702:	10 e0       	ldi	r17, 0x00	; 0
     704:	0f 5f       	subi	r16, 0xFF	; 255
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	0f 73       	andi	r16, 0x3F	; 63
     70a:	11 27       	eor	r17, r17
     70c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     70e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     710:	e8 12       	cpse	r14, r24
     712:	0c c0       	rjmp	.+24     	; 0x72c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	07 fc       	sbrc	r0, 7
     718:	fa cf       	rjmp	.-12     	; 0x70e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     71a:	e8 89       	ldd	r30, Y+16	; 0x10
     71c:	f9 89       	ldd	r31, Y+17	; 0x11
     71e:	80 81       	ld	r24, Z
     720:	85 ff       	sbrs	r24, 5
     722:	f5 cf       	rjmp	.-22     	; 0x70e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     724:	ce 01       	movw	r24, r28
     726:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     72a:	f1 cf       	rjmp	.-30     	; 0x70e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     72c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     72e:	fe 01       	movw	r30, r28
     730:	e8 0f       	add	r30, r24
     732:	f1 1d       	adc	r31, r1
     734:	e3 5a       	subi	r30, 0xA3	; 163
     736:	ff 4f       	sbci	r31, 0xFF	; 255
     738:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     73a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     73c:	ea 89       	ldd	r30, Y+18	; 0x12
     73e:	fb 89       	ldd	r31, Y+19	; 0x13
     740:	80 81       	ld	r24, Z
     742:	80 62       	ori	r24, 0x20	; 32
     744:	07 c0       	rjmp	.+14     	; 0x754 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     746:	ee 89       	ldd	r30, Y+22	; 0x16
     748:	ff 89       	ldd	r31, Y+23	; 0x17
     74a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     74c:	e8 89       	ldd	r30, Y+16	; 0x10
     74e:	f9 89       	ldd	r31, Y+17	; 0x11
     750:	80 81       	ld	r24, Z
     752:	80 64       	ori	r24, 0x40	; 64
     754:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	08 95       	ret

00000768 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     76e:	88 8d       	ldd	r24, Y+24	; 0x18
     770:	88 23       	and	r24, r24
     772:	c9 f0       	breq	.+50     	; 0x7a6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     774:	ea 89       	ldd	r30, Y+18	; 0x12
     776:	fb 89       	ldd	r31, Y+19	; 0x13
     778:	80 81       	ld	r24, Z
     77a:	85 fd       	sbrc	r24, 5
     77c:	05 c0       	rjmp	.+10     	; 0x788 <_ZN14HardwareSerial5flushEv+0x20>
     77e:	a8 89       	ldd	r26, Y+16	; 0x10
     780:	b9 89       	ldd	r27, Y+17	; 0x11
     782:	8c 91       	ld	r24, X
     784:	86 fd       	sbrc	r24, 6
     786:	0f c0       	rjmp	.+30     	; 0x7a6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	07 fc       	sbrc	r0, 7
     78c:	f5 cf       	rjmp	.-22     	; 0x778 <_ZN14HardwareSerial5flushEv+0x10>
     78e:	80 81       	ld	r24, Z
     790:	85 ff       	sbrs	r24, 5
     792:	f2 cf       	rjmp	.-28     	; 0x778 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     794:	a8 89       	ldd	r26, Y+16	; 0x10
     796:	b9 89       	ldd	r27, Y+17	; 0x11
     798:	8c 91       	ld	r24, X
     79a:	85 ff       	sbrs	r24, 5
     79c:	ed cf       	rjmp	.-38     	; 0x778 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     79e:	ce 01       	movw	r24, r28
     7a0:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7a4:	e7 cf       	rjmp	.-50     	; 0x774 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
     7bc:	6a 01       	movw	r12, r20
     7be:	7b 01       	movw	r14, r22
     7c0:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     7c2:	e8 89       	ldd	r30, Y+16	; 0x10
     7c4:	f9 89       	ldd	r31, Y+17	; 0x11
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7ca:	41 15       	cp	r20, r1
     7cc:	51 4e       	sbci	r21, 0xE1	; 225
     7ce:	61 05       	cpc	r22, r1
     7d0:	71 05       	cpc	r23, r1
     7d2:	b1 f0       	breq	.+44     	; 0x800 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	79 e0       	ldi	r23, 0x09	; 9
     7d8:	8d e3       	ldi	r24, 0x3D	; 61
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	a7 01       	movw	r20, r14
     7de:	96 01       	movw	r18, r12
     7e0:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
     7e4:	da 01       	movw	r26, r20
     7e6:	c9 01       	movw	r24, r18
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	a1 09       	sbc	r26, r1
     7ec:	b1 09       	sbc	r27, r1
     7ee:	b6 95       	lsr	r27
     7f0:	a7 95       	ror	r26
     7f2:	97 95       	ror	r25
     7f4:	87 95       	ror	r24
     7f6:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7f8:	21 15       	cp	r18, r1
     7fa:	80 e1       	ldi	r24, 0x10	; 16
     7fc:	38 07       	cpc	r19, r24
     7fe:	a8 f0       	brcs	.+42     	; 0x82a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     800:	e8 89       	ldd	r30, Y+16	; 0x10
     802:	f9 89       	ldd	r31, Y+17	; 0x11
     804:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     806:	60 e8       	ldi	r22, 0x80	; 128
     808:	74 e8       	ldi	r23, 0x84	; 132
     80a:	8e e1       	ldi	r24, 0x1E	; 30
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a7 01       	movw	r20, r14
     810:	96 01       	movw	r18, r12
     812:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
     816:	da 01       	movw	r26, r20
     818:	c9 01       	movw	r24, r18
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	a1 09       	sbc	r26, r1
     81e:	b1 09       	sbc	r27, r1
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     82a:	ec 85       	ldd	r30, Y+12	; 0x0c
     82c:	fd 85       	ldd	r31, Y+13	; 0x0d
     82e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     830:	ee 85       	ldd	r30, Y+14	; 0x0e
     832:	ff 85       	ldd	r31, Y+15	; 0x0f
     834:	20 83       	st	Z, r18

  _written = false;
     836:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     838:	ec 89       	ldd	r30, Y+20	; 0x14
     83a:	fd 89       	ldd	r31, Y+21	; 0x15
     83c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     83e:	ea 89       	ldd	r30, Y+18	; 0x12
     840:	fb 89       	ldd	r31, Y+19	; 0x13
     842:	80 81       	ld	r24, Z
     844:	80 61       	ori	r24, 0x10	; 16
     846:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     848:	ea 89       	ldd	r30, Y+18	; 0x12
     84a:	fb 89       	ldd	r31, Y+19	; 0x13
     84c:	80 81       	ld	r24, Z
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     852:	ea 89       	ldd	r30, Y+18	; 0x12
     854:	fb 89       	ldd	r31, Y+19	; 0x13
     856:	80 81       	ld	r24, Z
     858:	80 68       	ori	r24, 0x80	; 128
     85a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     85c:	ea 89       	ldd	r30, Y+18	; 0x12
     85e:	fb 89       	ldd	r31, Y+19	; 0x13
     860:	80 81       	ld	r24, Z
     862:	8f 7d       	andi	r24, 0xDF	; 223
     864:	80 83       	st	Z, r24
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	08 95       	ret

00000876 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	08 95       	ret

0000087c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     890:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Serial+0x10>
     894:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <Serial+0x11>
     898:	80 81       	ld	r24, Z
     89a:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <Serial+0x16>
     89e:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <Serial+0x17>
     8a2:	82 fd       	sbrc	r24, 2
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     8a6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     8a8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Serial+0x19>
     8ac:	8f 5f       	subi	r24, 0xFF	; 255
     8ae:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     8b0:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <Serial+0x1a>
     8b4:	82 17       	cp	r24, r18
     8b6:	51 f0       	breq	.+20     	; 0x8cc <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     8b8:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <Serial+0x19>
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	ea 52       	subi	r30, 0x2A	; 42
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     8c4:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <Serial+0x19>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8ca:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     902:	86 ed       	ldi	r24, 0xD6	; 214
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     90a:	ff 91       	pop	r31
     90c:	ef 91       	pop	r30
     90e:	bf 91       	pop	r27
     910:	af 91       	pop	r26
     912:	9f 91       	pop	r25
     914:	8f 91       	pop	r24
     916:	7f 91       	pop	r23
     918:	6f 91       	pop	r22
     91a:	5f 91       	pop	r21
     91c:	4f 91       	pop	r20
     91e:	3f 91       	pop	r19
     920:	2f 91       	pop	r18
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     92c:	86 ed       	ldi	r24, 0xD6	; 214
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 01 03 	call	0x602	; 0x602 <_ZN14HardwareSerial9availableEv>
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	89 2b       	or	r24, r25
     938:	09 f4       	brne	.+2      	; 0x93c <_Z17Serial0_availablev+0x10>
     93a:	20 e0       	ldi	r18, 0x00	; 0
}
     93c:	82 2f       	mov	r24, r18
     93e:	08 95       	ret

00000940 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     940:	e6 ed       	ldi	r30, 0xD6	; 214
     942:	f1 e0       	ldi	r31, 0x01	; 1
     944:	13 82       	std	Z+3, r1	; 0x03
     946:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     948:	88 ee       	ldi	r24, 0xE8	; 232
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	84 83       	std	Z+4, r24	; 0x04
     952:	95 83       	std	Z+5, r25	; 0x05
     954:	a6 83       	std	Z+6, r26	; 0x06
     956:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     958:	8b e7       	ldi	r24, 0x7B	; 123
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
     960:	85 ec       	ldi	r24, 0xC5	; 197
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	95 87       	std	Z+13, r25	; 0x0d
     966:	84 87       	std	Z+12, r24	; 0x0c
     968:	84 ec       	ldi	r24, 0xC4	; 196
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	97 87       	std	Z+15, r25	; 0x0f
     96e:	86 87       	std	Z+14, r24	; 0x0e
     970:	80 ec       	ldi	r24, 0xC0	; 192
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	91 8b       	std	Z+17, r25	; 0x11
     976:	80 8b       	std	Z+16, r24	; 0x10
     978:	81 ec       	ldi	r24, 0xC1	; 193
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	93 8b       	std	Z+19, r25	; 0x13
     97e:	82 8b       	std	Z+18, r24	; 0x12
     980:	82 ec       	ldi	r24, 0xC2	; 194
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	95 8b       	std	Z+21, r25	; 0x15
     986:	84 8b       	std	Z+20, r24	; 0x14
     988:	86 ec       	ldi	r24, 0xC6	; 198
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	97 8b       	std	Z+23, r25	; 0x17
     98e:	86 8b       	std	Z+22, r24	; 0x16
     990:	11 8e       	std	Z+25, r1	; 0x19
     992:	12 8e       	std	Z+26, r1	; 0x1a
     994:	13 8e       	std	Z+27, r1	; 0x1b
     996:	14 8e       	std	Z+28, r1	; 0x1c
     998:	08 95       	ret

0000099a <initVariant>:
     99a:	08 95       	ret

0000099c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     99c:	0e 94 7a 07 	call	0xef4	; 0xef4 <init>

	initVariant();
     9a0:	0e 94 cd 04 	call	0x99a	; 0x99a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     9a4:	0e 94 84 00 	call	0x108	; 0x108 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     9a8:	ce e3       	ldi	r28, 0x3E	; 62
     9aa:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     9ac:	0e 94 cd 00 	call	0x19a	; 0x19a <loop>
		if (serialEventRun) serialEventRun();
     9b0:	20 97       	sbiw	r28, 0x00	; 0
     9b2:	e1 f3       	breq	.-8      	; 0x9ac <main+0x10>
     9b4:	0e 94 3e 03 	call	0x67c	; 0x67c <_Z14serialEventRunv>
     9b8:	f9 cf       	rjmp	.-14     	; 0x9ac <main+0x10>

000009ba <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	6c 01       	movw	r12, r24
     9cc:	7a 01       	movw	r14, r20
     9ce:	8b 01       	movw	r16, r22
     9d0:	c0 e0       	ldi	r28, 0x00	; 0
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
     9d4:	ce 15       	cp	r28, r14
     9d6:	df 05       	cpc	r29, r15
     9d8:	81 f0       	breq	.+32     	; 0x9fa <_ZN5Print5writeEPKhj+0x40>
     9da:	d8 01       	movw	r26, r16
     9dc:	6d 91       	ld	r22, X+
     9de:	8d 01       	movw	r16, r26
     9e0:	d6 01       	movw	r26, r12
     9e2:	ed 91       	ld	r30, X+
     9e4:	fc 91       	ld	r31, X
     9e6:	01 90       	ld	r0, Z+
     9e8:	f0 81       	ld	r31, Z
     9ea:	e0 2d       	mov	r30, r0
     9ec:	c6 01       	movw	r24, r12
     9ee:	09 95       	icall
     9f0:	89 2b       	or	r24, r25
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <_ZN5Print5writeEPKhj+0x3e>
     9f4:	21 96       	adiw	r28, 0x01	; 1
     9f6:	ee cf       	rjmp	.-36     	; 0x9d4 <_ZN5Print5writeEPKhj+0x1a>
     9f8:	7e 01       	movw	r14, r28
     9fa:	c7 01       	movw	r24, r14
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	08 95       	ret

00000a0e <_ZN5Print5writeEPKc>:
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	79 f0       	breq	.+30     	; 0xa32 <_ZN5Print5writeEPKc+0x24>
     a14:	fb 01       	movw	r30, r22
     a16:	01 90       	ld	r0, Z+
     a18:	00 20       	and	r0, r0
     a1a:	e9 f7       	brne	.-6      	; 0xa16 <_ZN5Print5writeEPKc+0x8>
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	af 01       	movw	r20, r30
     a20:	46 1b       	sub	r20, r22
     a22:	57 0b       	sbc	r21, r23
     a24:	dc 01       	movw	r26, r24
     a26:	ed 91       	ld	r30, X+
     a28:	fc 91       	ld	r31, X
     a2a:	02 80       	ldd	r0, Z+2	; 0x02
     a2c:	f3 81       	ldd	r31, Z+3	; 0x03
     a2e:	e0 2d       	mov	r30, r0
     a30:	09 94       	ijmp
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	08 95       	ret

00000a38 <_ZN5Print5printEPKc>:
     a38:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_ZN5Print5writeEPKc>

00000a3c <_ZN5Print5printEc>:
     a3c:	dc 01       	movw	r26, r24
     a3e:	ed 91       	ld	r30, X+
     a40:	fc 91       	ld	r31, X
     a42:	01 90       	ld	r0, Z+
     a44:	f0 81       	ld	r31, Z
     a46:	e0 2d       	mov	r30, r0
     a48:	09 94       	ijmp

00000a4a <_ZN5Print7printlnEv>:
     a4a:	69 e8       	ldi	r22, 0x89	; 137
     a4c:	71 e0       	ldi	r23, 0x01	; 1
     a4e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_ZN5Print5writeEPKc>

00000a52 <_ZN5Print7printlnEPKc>:
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	ec 01       	movw	r28, r24
     a5c:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN5Print5writeEPKc>
     a60:	8c 01       	movw	r16, r24
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 25 05 	call	0xa4a	; 0xa4a <_ZN5Print7printlnEv>
     a68:	80 0f       	add	r24, r16
     a6a:	91 1f       	adc	r25, r17
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	08 95       	ret

00000a76 <_ZN5Print11printNumberEmh>:
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	a1 97       	sbiw	r28, 0x21	; 33
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	7c 01       	movw	r14, r24
     a9c:	fa 01       	movw	r30, r20
     a9e:	cb 01       	movw	r24, r22
     aa0:	19 a2       	std	Y+33, r1	; 0x21
     aa2:	22 30       	cpi	r18, 0x02	; 2
     aa4:	08 f4       	brcc	.+2      	; 0xaa8 <_ZN5Print11printNumberEmh+0x32>
     aa6:	2a e0       	ldi	r18, 0x0A	; 10
     aa8:	8e 01       	movw	r16, r28
     aaa:	0f 5d       	subi	r16, 0xDF	; 223
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	82 2e       	mov	r8, r18
     ab0:	91 2c       	mov	r9, r1
     ab2:	a1 2c       	mov	r10, r1
     ab4:	b1 2c       	mov	r11, r1
     ab6:	bf 01       	movw	r22, r30
     ab8:	a5 01       	movw	r20, r10
     aba:	94 01       	movw	r18, r8
     abc:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
     ac0:	f9 01       	movw	r30, r18
     ac2:	ca 01       	movw	r24, r20
     ac4:	01 50       	subi	r16, 0x01	; 1
     ac6:	11 09       	sbc	r17, r1
     ac8:	6a 30       	cpi	r22, 0x0A	; 10
     aca:	10 f4       	brcc	.+4      	; 0xad0 <_ZN5Print11printNumberEmh+0x5a>
     acc:	60 5d       	subi	r22, 0xD0	; 208
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <_ZN5Print11printNumberEmh+0x5c>
     ad0:	69 5c       	subi	r22, 0xC9	; 201
     ad2:	d8 01       	movw	r26, r16
     ad4:	6c 93       	st	X, r22
     ad6:	23 2b       	or	r18, r19
     ad8:	24 2b       	or	r18, r20
     ada:	25 2b       	or	r18, r21
     adc:	61 f7       	brne	.-40     	; 0xab6 <_ZN5Print11printNumberEmh+0x40>
     ade:	b8 01       	movw	r22, r16
     ae0:	c7 01       	movw	r24, r14
     ae2:	0e 94 07 05 	call	0xa0e	; 0xa0e <_ZN5Print5writeEPKc>
     ae6:	a1 96       	adiw	r28, 0x21	; 33
     ae8:	0f b6       	in	r0, 0x3f	; 63
     aea:	f8 94       	cli
     aec:	de bf       	out	0x3e, r29	; 62
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	cd bf       	out	0x3d, r28	; 61
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	8f 90       	pop	r8
     b06:	08 95       	ret

00000b08 <_ZN5Print5printEmi>:
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 f4       	brne	.+16     	; 0xb1e <_ZN5Print5printEmi+0x16>
     b0e:	dc 01       	movw	r26, r24
     b10:	ed 91       	ld	r30, X+
     b12:	fc 91       	ld	r31, X
     b14:	01 90       	ld	r0, Z+
     b16:	f0 81       	ld	r31, Z
     b18:	e0 2d       	mov	r30, r0
     b1a:	64 2f       	mov	r22, r20
     b1c:	09 94       	ijmp
     b1e:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <_ZN5Print11printNumberEmh>

00000b22 <_ZN5Print5printEji>:
     b22:	9a 01       	movw	r18, r20
     b24:	ab 01       	movw	r20, r22
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	0c 94 84 05 	jmp	0xb08	; 0xb08 <_ZN5Print5printEmi>

00000b2e <_ZN5Print5printEli>:
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	21 15       	cp	r18, r1
     b40:	31 05       	cpc	r19, r1
     b42:	81 f4       	brne	.+32     	; 0xb64 <_ZN5Print5printEli+0x36>
     b44:	dc 01       	movw	r26, r24
     b46:	ed 91       	ld	r30, X+
     b48:	fc 91       	ld	r31, X
     b4a:	01 90       	ld	r0, Z+
     b4c:	f0 81       	ld	r31, Z
     b4e:	e0 2d       	mov	r30, r0
     b50:	64 2f       	mov	r22, r20
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	09 94       	ijmp
     b64:	2a 30       	cpi	r18, 0x0A	; 10
     b66:	31 05       	cpc	r19, r1
     b68:	01 f5       	brne	.+64     	; 0xbaa <_ZN5Print5printEli+0x7c>
     b6a:	77 ff       	sbrs	r23, 7
     b6c:	1d c0       	rjmp	.+58     	; 0xba8 <_ZN5Print5printEli+0x7a>
     b6e:	6a 01       	movw	r12, r20
     b70:	7b 01       	movw	r14, r22
     b72:	ec 01       	movw	r28, r24
     b74:	6d e2       	ldi	r22, 0x2D	; 45
     b76:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_ZN5Print5printEc>
     b7a:	8c 01       	movw	r16, r24
     b7c:	44 27       	eor	r20, r20
     b7e:	55 27       	eor	r21, r21
     b80:	ba 01       	movw	r22, r20
     b82:	4c 19       	sub	r20, r12
     b84:	5d 09       	sbc	r21, r13
     b86:	6e 09       	sbc	r22, r14
     b88:	7f 09       	sbc	r23, r15
     b8a:	2a e0       	ldi	r18, 0x0A	; 10
     b8c:	ce 01       	movw	r24, r28
     b8e:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN5Print11printNumberEmh>
     b92:	80 0f       	add	r24, r16
     b94:	91 1f       	adc	r25, r17
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	08 95       	ret
     ba8:	2a e0       	ldi	r18, 0x0A	; 10
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <_ZN5Print11printNumberEmh>

00000bbe <_ZN5Print5printEii>:
     bbe:	9a 01       	movw	r18, r20
     bc0:	ab 01       	movw	r20, r22
     bc2:	77 0f       	add	r23, r23
     bc4:	66 0b       	sbc	r22, r22
     bc6:	77 0b       	sbc	r23, r23
     bc8:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <_ZN5Print5printEli>

00000bcc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     bcc:	7f 92       	push	r7
     bce:	8f 92       	push	r8
     bd0:	9f 92       	push	r9
     bd2:	af 92       	push	r10
     bd4:	bf 92       	push	r11
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	8c 01       	movw	r16, r24
     be8:	6a 01       	movw	r12, r20
     bea:	7b 01       	movw	r14, r22
     bec:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     bee:	9a 01       	movw	r18, r20
     bf0:	ab 01       	movw	r20, r22
     bf2:	c7 01       	movw	r24, r14
     bf4:	b6 01       	movw	r22, r12
     bf6:	0e 94 19 11 	call	0x2232	; 0x2232 <__unordsf2>
     bfa:	88 23       	and	r24, r24
     bfc:	19 f0       	breq	.+6      	; 0xc04 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     bfe:	6c e8       	ldi	r22, 0x8C	; 140
     c00:	71 e0       	ldi	r23, 0x01	; 1
     c02:	27 c0       	rjmp	.+78     	; 0xc52 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     c04:	46 01       	movw	r8, r12
     c06:	57 01       	movw	r10, r14
     c08:	e8 94       	clt
     c0a:	b7 f8       	bld	r11, 7
     c0c:	2f ef       	ldi	r18, 0xFF	; 255
     c0e:	3f ef       	ldi	r19, 0xFF	; 255
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	5f e7       	ldi	r21, 0x7F	; 127
     c14:	c5 01       	movw	r24, r10
     c16:	b4 01       	movw	r22, r8
     c18:	0e 94 19 11 	call	0x2232	; 0x2232 <__unordsf2>
     c1c:	81 11       	cpse	r24, r1
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <_ZN5Print10printFloatEdh+0x6e>
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	4f e7       	ldi	r20, 0x7F	; 127
     c26:	5f e7       	ldi	r21, 0x7F	; 127
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 a4 01 	call	0x348	; 0x348 <__cmpsf2>
     c30:	18 16       	cp	r1, r24
     c32:	1c f4       	brge	.+6      	; 0xc3a <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     c34:	60 e9       	ldi	r22, 0x90	; 144
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	0c c0       	rjmp	.+24     	; 0xc52 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     c3a:	2f ef       	ldi	r18, 0xFF	; 255
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	4f e7       	ldi	r20, 0x7F	; 127
     c40:	5f e4       	ldi	r21, 0x4F	; 79
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__gesf2>
     c4a:	18 16       	cp	r1, r24
     c4c:	94 f4       	brge	.+36     	; 0xc72 <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     c4e:	64 e9       	ldi	r22, 0x94	; 148
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	cf 90       	pop	r12
     c64:	bf 90       	pop	r11
     c66:	af 90       	pop	r10
     c68:	9f 90       	pop	r9
     c6a:	8f 90       	pop	r8
     c6c:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     c6e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     c72:	2f ef       	ldi	r18, 0xFF	; 255
     c74:	3f ef       	ldi	r19, 0xFF	; 255
     c76:	4f e7       	ldi	r20, 0x7F	; 127
     c78:	5f ec       	ldi	r21, 0xCF	; 207
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 a4 01 	call	0x348	; 0x348 <__cmpsf2>
     c82:	87 fd       	sbrc	r24, 7
     c84:	e4 cf       	rjmp	.-56     	; 0xc4e <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	a9 01       	movw	r20, r18
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	0e 94 a4 01 	call	0x348	; 0x348 <__cmpsf2>
     c94:	87 ff       	sbrs	r24, 7
     c96:	0a c0       	rjmp	.+20     	; 0xcac <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
     c98:	6d e2       	ldi	r22, 0x2D	; 45
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_ZN5Print5printEc>
     ca0:	ec 01       	movw	r28, r24
     number = -number;
     ca2:	f7 fa       	bst	r15, 7
     ca4:	f0 94       	com	r15
     ca6:	f7 f8       	bld	r15, 7
     ca8:	f0 94       	com	r15
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cb0:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     cba:	7b 14       	cp	r7, r11
     cbc:	41 f0       	breq	.+16     	; 0xcce <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e2       	ldi	r20, 0x20	; 32
     cc4:	51 e4       	ldi	r21, 0x41	; 65
     cc6:	0e 94 a9 01 	call	0x352	; 0x352 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cca:	b3 94       	inc	r11
     ccc:	f6 cf       	rjmp	.-20     	; 0xcba <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
     cce:	a7 01       	movw	r20, r14
     cd0:	96 01       	movw	r18, r12
     cd2:	0e 94 40 10 	call	0x2080	; 0x2080 <__addsf3>
     cd6:	6b 01       	movw	r12, r22
     cd8:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     cda:	0e 94 1b 02 	call	0x436	; 0x436 <__fixunssfsi>
     cde:	4b 01       	movw	r8, r22
     ce0:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     ce2:	2a e0       	ldi	r18, 0x0A	; 10
     ce4:	ab 01       	movw	r20, r22
     ce6:	bc 01       	movw	r22, r24
     ce8:	c8 01       	movw	r24, r16
     cea:	0e 94 3b 05 	call	0xa76	; 0xa76 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     cee:	c8 0f       	add	r28, r24
     cf0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     cf2:	77 20       	and	r7, r7
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     cf6:	c5 01       	movw	r24, r10
     cf8:	b4 01       	movw	r22, r8
     cfa:	0e 94 4a 02 	call	0x494	; 0x494 <__floatunsisf>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	0e 94 3f 10 	call	0x207e	; 0x207e <__subsf3>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     d0e:	6e e2       	ldi	r22, 0x2E	; 46
     d10:	c8 01       	movw	r24, r16
     d12:	0e 94 1e 05 	call	0xa3c	; 0xa3c <_ZN5Print5printEc>
     d16:	c8 0f       	add	r28, r24
     d18:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e2       	ldi	r20, 0x20	; 32
     d20:	51 e4       	ldi	r21, 0x41	; 65
     d22:	c7 01       	movw	r24, r14
     d24:	b6 01       	movw	r22, r12
     d26:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     d2a:	4b 01       	movw	r8, r22
     d2c:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
     d2e:	0e 94 1b 02 	call	0x436	; 0x436 <__fixunssfsi>
     d32:	6b 01       	movw	r12, r22
     d34:	7c 01       	movw	r14, r24
    n += print(toPrint);
     d36:	4a e0       	ldi	r20, 0x0A	; 10
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	c8 01       	movw	r24, r16
     d3c:	0e 94 91 05 	call	0xb22	; 0xb22 <_ZN5Print5printEji>
     d40:	c8 0f       	add	r28, r24
     d42:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     d44:	b6 01       	movw	r22, r12
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 4a 02 	call	0x494	; 0x494 <__floatunsisf>
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	c5 01       	movw	r24, r10
     d54:	b4 01       	movw	r22, r8
     d56:	0e 94 3f 10 	call	0x207e	; 0x207e <__subsf3>
     d5a:	6b 01       	movw	r12, r22
     d5c:	7c 01       	movw	r14, r24
     d5e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     d60:	71 10       	cpse	r7, r1
     d62:	db cf       	rjmp	.-74     	; 0xd1a <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     d64:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	08 95       	ret

00000d82 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     d82:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_ZN5Print10printFloatEdh>

00000d86 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	8f 93       	push	r24
     d96:	9f 93       	push	r25
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <timer0_millis>
     da0:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <timer0_millis+0x1>
     da4:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <timer0_millis+0x2>
     da8:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <timer0_millis+0x3>
     dac:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <timer0_fract>
     db0:	23 e0       	ldi	r18, 0x03	; 3
     db2:	23 0f       	add	r18, r19
     db4:	2d 37       	cpi	r18, 0x7D	; 125
     db6:	20 f4       	brcc	.+8      	; 0xdc0 <__vector_16+0x3a>
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	a1 1d       	adc	r26, r1
     dbc:	b1 1d       	adc	r27, r1
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <__vector_16+0x44>
     dc0:	26 e8       	ldi	r18, 0x86	; 134
     dc2:	23 0f       	add	r18, r19
     dc4:	02 96       	adiw	r24, 0x02	; 2
     dc6:	a1 1d       	adc	r26, r1
     dc8:	b1 1d       	adc	r27, r1
     dca:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <timer0_fract>
     dce:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <timer0_millis>
     dd2:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <timer0_millis+0x1>
     dd6:	a0 93 76 02 	sts	0x0276, r26	; 0x800276 <timer0_millis+0x2>
     dda:	b0 93 77 02 	sts	0x0277, r27	; 0x800277 <timer0_millis+0x3>
     dde:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer0_overflow_count>
     de2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <timer0_overflow_count+0x1>
     de6:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <timer0_overflow_count+0x2>
     dea:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <timer0_overflow_count+0x3>
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	a1 1d       	adc	r26, r1
     df2:	b1 1d       	adc	r27, r1
     df4:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <timer0_overflow_count>
     df8:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <timer0_overflow_count+0x1>
     dfc:	a0 93 7a 02 	sts	0x027A, r26	; 0x80027a <timer0_overflow_count+0x2>
     e00:	b0 93 7b 02 	sts	0x027B, r27	; 0x80027b <timer0_overflow_count+0x3>
     e04:	bf 91       	pop	r27
     e06:	af 91       	pop	r26
     e08:	9f 91       	pop	r25
     e0a:	8f 91       	pop	r24
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <millis>:
     e1a:	2f b7       	in	r18, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <timer0_millis>
     e22:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <timer0_millis+0x1>
     e26:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <timer0_millis+0x2>
     e2a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <timer0_millis+0x3>
     e2e:	2f bf       	out	0x3f, r18	; 63
     e30:	08 95       	ret

00000e32 <micros>:
     e32:	3f b7       	in	r19, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <timer0_overflow_count>
     e3a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <timer0_overflow_count+0x1>
     e3e:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <timer0_overflow_count+0x2>
     e42:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <timer0_overflow_count+0x3>
     e46:	26 b5       	in	r18, 0x26	; 38
     e48:	a8 9b       	sbis	0x15, 0	; 21
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <micros+0x24>
     e4c:	2f 3f       	cpi	r18, 0xFF	; 255
     e4e:	19 f0       	breq	.+6      	; 0xe56 <micros+0x24>
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	a1 1d       	adc	r26, r1
     e54:	b1 1d       	adc	r27, r1
     e56:	3f bf       	out	0x3f, r19	; 63
     e58:	ba 2f       	mov	r27, r26
     e5a:	a9 2f       	mov	r26, r25
     e5c:	98 2f       	mov	r25, r24
     e5e:	88 27       	eor	r24, r24
     e60:	82 0f       	add	r24, r18
     e62:	91 1d       	adc	r25, r1
     e64:	a1 1d       	adc	r26, r1
     e66:	b1 1d       	adc	r27, r1
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	42 e0       	ldi	r20, 0x02	; 2
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	4a 95       	dec	r20
     e78:	d1 f7       	brne	.-12     	; 0xe6e <micros+0x3c>
     e7a:	08 95       	ret

00000e7c <delay>:
     e7c:	8f 92       	push	r8
     e7e:	9f 92       	push	r9
     e80:	af 92       	push	r10
     e82:	bf 92       	push	r11
     e84:	cf 92       	push	r12
     e86:	df 92       	push	r13
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	6b 01       	movw	r12, r22
     e8e:	7c 01       	movw	r14, r24
     e90:	0e 94 19 07 	call	0xe32	; 0xe32 <micros>
     e94:	4b 01       	movw	r8, r22
     e96:	5c 01       	movw	r10, r24
     e98:	c1 14       	cp	r12, r1
     e9a:	d1 04       	cpc	r13, r1
     e9c:	e1 04       	cpc	r14, r1
     e9e:	f1 04       	cpc	r15, r1
     ea0:	01 f1       	breq	.+64     	; 0xee2 <delay+0x66>
     ea2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <yield>
     ea6:	0e 94 19 07 	call	0xe32	; 0xe32 <micros>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	88 19       	sub	r24, r8
     eb0:	99 09       	sbc	r25, r9
     eb2:	aa 09       	sbc	r26, r10
     eb4:	bb 09       	sbc	r27, r11
     eb6:	88 3e       	cpi	r24, 0xE8	; 232
     eb8:	93 40       	sbci	r25, 0x03	; 3
     eba:	a1 05       	cpc	r26, r1
     ebc:	b1 05       	cpc	r27, r1
     ebe:	60 f3       	brcs	.-40     	; 0xe98 <delay+0x1c>
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	c2 1a       	sub	r12, r18
     ec4:	d1 08       	sbc	r13, r1
     ec6:	e1 08       	sbc	r14, r1
     ec8:	f1 08       	sbc	r15, r1
     eca:	88 ee       	ldi	r24, 0xE8	; 232
     ecc:	88 0e       	add	r8, r24
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	98 1e       	adc	r9, r24
     ed2:	a1 1c       	adc	r10, r1
     ed4:	b1 1c       	adc	r11, r1
     ed6:	c1 14       	cp	r12, r1
     ed8:	d1 04       	cpc	r13, r1
     eda:	e1 04       	cpc	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	19 f7       	brne	.-58     	; 0xea6 <delay+0x2a>
     ee0:	db cf       	rjmp	.-74     	; 0xe98 <delay+0x1c>
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	08 95       	ret

00000ef4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ef4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ef6:	84 b5       	in	r24, 0x24	; 36
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     efc:	84 b5       	in	r24, 0x24	; 36
     efe:	81 60       	ori	r24, 0x01	; 1
     f00:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f02:	85 b5       	in	r24, 0x25	; 37
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f0e:	ee e6       	ldi	r30, 0x6E	; 110
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	81 60       	ori	r24, 0x01	; 1
     f16:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f18:	e1 e8       	ldi	r30, 0x81	; 129
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f1e:	80 81       	ld	r24, Z
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f24:	80 81       	ld	r24, Z
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f2a:	e0 e8       	ldi	r30, 0x80	; 128
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f34:	e1 eb       	ldi	r30, 0xB1	; 177
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f3e:	e0 eb       	ldi	r30, 0xB0	; 176
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     f48:	ea e7       	ldi	r30, 0x7A	; 122
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	84 60       	ori	r24, 0x04	; 4
     f50:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     f52:	80 81       	ld	r24, Z
     f54:	82 60       	ori	r24, 0x02	; 2
     f56:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     f58:	80 81       	ld	r24, Z
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     f5e:	80 81       	ld	r24, Z
     f60:	80 68       	ori	r24, 0x80	; 128
     f62:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     f64:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     f68:	08 95       	ret

00000f6a <_Z18averageDCEstimatorPlj>:
  return(beatDetected);
}

//  Average DC Estimator
int16_t averageDCEstimator(int32_t *p, uint16_t x)
{
     f6a:	fc 01       	movw	r30, r24
  *p += ((((long) x << 15) - *p) >> 4);
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	a2 81       	ldd	r26, Z+2	; 0x02
     f72:	b3 81       	ldd	r27, Z+3	; 0x03
     f74:	ab 01       	movw	r20, r22
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	2f e0       	ldi	r18, 0x0F	; 15
     f7c:	44 0f       	add	r20, r20
     f7e:	55 1f       	adc	r21, r21
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	2a 95       	dec	r18
     f86:	d1 f7       	brne	.-12     	; 0xf7c <_Z18averageDCEstimatorPlj+0x12>
     f88:	48 1b       	sub	r20, r24
     f8a:	59 0b       	sbc	r21, r25
     f8c:	6a 0b       	sbc	r22, r26
     f8e:	7b 0b       	sbc	r23, r27
     f90:	34 e0       	ldi	r19, 0x04	; 4
     f92:	75 95       	asr	r23
     f94:	67 95       	ror	r22
     f96:	57 95       	ror	r21
     f98:	47 95       	ror	r20
     f9a:	3a 95       	dec	r19
     f9c:	d1 f7       	brne	.-12     	; 0xf92 <_Z18averageDCEstimatorPlj+0x28>
     f9e:	48 0f       	add	r20, r24
     fa0:	59 1f       	adc	r21, r25
     fa2:	6a 1f       	adc	r22, r26
     fa4:	7b 1f       	adc	r23, r27
     fa6:	40 83       	st	Z, r20
     fa8:	51 83       	std	Z+1, r21	; 0x01
     faa:	62 83       	std	Z+2, r22	; 0x02
     fac:	73 83       	std	Z+3, r23	; 0x03
  return (*p >> 15);
     fae:	db 01       	movw	r26, r22
     fb0:	ca 01       	movw	r24, r20
     fb2:	4f e0       	ldi	r20, 0x0F	; 15
     fb4:	b5 95       	asr	r27
     fb6:	a7 95       	ror	r26
     fb8:	97 95       	ror	r25
     fba:	87 95       	ror	r24
     fbc:	4a 95       	dec	r20
     fbe:	d1 f7       	brne	.-12     	; 0xfb4 <_Z18averageDCEstimatorPlj+0x4a>
}
     fc0:	08 95       	ret

00000fc2 <_Z16lowPassFIRFilteri>:

//  Low Pass FIR Filter
int16_t lowPassFIRFilter(int16_t din)
{  
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
  cbuf[offset] = din;
     fd8:	90 90 7c 02 	lds	r9, 0x027C	; 0x80027c <offset>
     fdc:	c9 2d       	mov	r28, r9
     fde:	d0 e0       	ldi	r29, 0x00	; 0
     fe0:	fe 01       	movw	r30, r28
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e3 58       	subi	r30, 0x83	; 131
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
     fee:	fe 01       	movw	r30, r28
     ff0:	3b 97       	sbiw	r30, 0x0b	; 11
     ff2:	ef 71       	andi	r30, 0x1F	; 31
     ff4:	ff 27       	eor	r31, r31
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	e3 58       	subi	r30, 0x83	; 131
     ffc:	fd 4f       	sbci	r31, 0xFD	; 253
     ffe:	c0 80       	ld	r12, Z
    1000:	d1 80       	ldd	r13, Z+1	; 0x01
}

//  Integer multiplier
int32_t mul16(int16_t x, int16_t y)
{
  return((long)x * (long)y);
    1002:	0d 2c       	mov	r0, r13
    1004:	00 0c       	add	r0, r0
    1006:	ee 08       	sbc	r14, r14
    1008:	ff 08       	sbc	r15, r15
    100a:	bc e0       	ldi	r27, 0x0C	; 12
    100c:	cc 0c       	add	r12, r12
    100e:	dd 1c       	adc	r13, r13
    1010:	ee 1c       	adc	r14, r14
    1012:	ff 1c       	adc	r15, r15
    1014:	ba 95       	dec	r27
    1016:	d1 f7       	brne	.-12     	; 0x100c <_Z16lowPassFIRFilteri+0x4a>
    1018:	08 e9       	ldi	r16, 0x98	; 152
    101a:	11 e0       	ldi	r17, 0x01	; 1
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
    1020:	5e 01       	movw	r10, r28
    1022:	86 e1       	ldi	r24, 0x16	; 22
    1024:	a8 1a       	sub	r10, r24
    1026:	b1 08       	sbc	r11, r1
    1028:	d5 01       	movw	r26, r10
    102a:	a4 0f       	add	r26, r20
    102c:	b5 1f       	adc	r27, r21
    102e:	af 71       	andi	r26, 0x1F	; 31
    1030:	bb 27       	eor	r27, r27
    1032:	aa 0f       	add	r26, r26
    1034:	bb 1f       	adc	r27, r27
    1036:	a3 58       	subi	r26, 0x83	; 131
    1038:	bd 4f       	sbci	r27, 0xFD	; 253
    103a:	fe 01       	movw	r30, r28
    103c:	e4 1b       	sub	r30, r20
    103e:	f5 0b       	sbc	r31, r21
    1040:	ef 71       	andi	r30, 0x1F	; 31
    1042:	ff 27       	eor	r31, r31
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	e3 58       	subi	r30, 0x83	; 131
    104a:	fd 4f       	sbci	r31, 0xFD	; 253
    104c:	0d 90       	ld	r0, X+
    104e:	bc 91       	ld	r27, X
    1050:	a0 2d       	mov	r26, r0
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	a8 0f       	add	r26, r24
    1058:	b9 1f       	adc	r27, r25
    105a:	f8 01       	movw	r30, r16
    105c:	21 91       	ld	r18, Z+
    105e:	31 91       	ld	r19, Z+
    1060:	8f 01       	movw	r16, r30
    1062:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__mulhisi3>
    1066:	c6 0e       	add	r12, r22
    1068:	d7 1e       	adc	r13, r23
    106a:	e8 1e       	adc	r14, r24
    106c:	f9 1e       	adc	r15, r25
    106e:	4f 5f       	subi	r20, 0xFF	; 255
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
{  
  cbuf[offset] = din;

  int32_t z = mul16(FIRCoeffs[11], cbuf[(offset - 11) & 0x1F]);
  
  for (uint8_t i = 0 ; i < 11 ; i++)
    1072:	4b 30       	cpi	r20, 0x0B	; 11
    1074:	51 05       	cpc	r21, r1
    1076:	c1 f6       	brne	.-80     	; 0x1028 <_Z16lowPassFIRFilteri+0x66>
  {
    z += mul16(FIRCoeffs[i], cbuf[(offset - i) & 0x1F] + cbuf[(offset - 22 + i) & 0x1F]);
  }

  offset++;
  offset %= 32; //Wrap condition
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 0d       	add	r24, r9
    107c:	8f 71       	andi	r24, 0x1F	; 31
    107e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <offset>

  return(z >> 15);
    1082:	d7 01       	movw	r26, r14
    1084:	c6 01       	movw	r24, r12
    1086:	2f e0       	ldi	r18, 0x0F	; 15
    1088:	b5 95       	asr	r27
    108a:	a7 95       	ror	r26
    108c:	97 95       	ror	r25
    108e:	87 95       	ror	r24
    1090:	2a 95       	dec	r18
    1092:	d1 f7       	brne	.-12     	; 0x1088 <_Z16lowPassFIRFilteri+0xc6>
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	df 90       	pop	r13
    10a2:	cf 90       	pop	r12
    10a4:	bf 90       	pop	r11
    10a6:	af 90       	pop	r10
    10a8:	9f 90       	pop	r9
    10aa:	08 95       	ret

000010ac <_Z12checkForBeatl>:

//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	6b 01       	movw	r12, r22
    10b6:	7c 01       	movw	r14, r24
  bool beatDetected = false;

  //  Save current state
  IR_AC_Signal_Previous = IR_AC_Signal_Current;
    10b8:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <IR_AC_Signal_Current>
    10bc:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <IR_AC_Signal_Current+0x1>
    10c0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <IR_AC_Signal_Previous+0x1>
    10c4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <IR_AC_Signal_Previous>
  //This is good to view for debugging
  //Serial.print("Signal_Current: ");
  //Serial.println(IR_AC_Signal_Current);

  //  Process next data sample
  IR_Average_Estimated = averageDCEstimator(&ir_avg_reg, sample);
    10c8:	b6 01       	movw	r22, r12
    10ca:	8d eb       	ldi	r24, 0xBD	; 189
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_Z18averageDCEstimatorPlj>
    10d2:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <IR_Average_Estimated+0x1>
    10d6:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <IR_Average_Estimated>
  IR_AC_Signal_Current = lowPassFIRFilter(sample - IR_Average_Estimated);
    10da:	96 01       	movw	r18, r12
    10dc:	28 1b       	sub	r18, r24
    10de:	39 0b       	sbc	r19, r25
    10e0:	c9 01       	movw	r24, r18
    10e2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_Z16lowPassFIRFilteri>
    10e6:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <IR_AC_Signal_Current+0x1>
    10ea:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <IR_AC_Signal_Current>

  //  Detect positive zero crossing (rising edge)
  if ((IR_AC_Signal_Previous < 0) & (IR_AC_Signal_Current >= 0))
    10ee:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <IR_AC_Signal_Previous>
    10f2:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <IR_AC_Signal_Previous+0x1>
    10f6:	57 ff       	sbrs	r21, 7
    10f8:	28 c0       	rjmp	.+80     	; 0x114a <_Z12checkForBeatl+0x9e>
    10fa:	97 fd       	sbrc	r25, 7
    10fc:	26 c0       	rjmp	.+76     	; 0x114a <_Z12checkForBeatl+0x9e>
  {
  
    IR_AC_Max = IR_AC_Signal_max; //Adjust our AC max and min
    10fe:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <IR_AC_Signal_max>
    1102:	30 91 c8 02 	lds	r19, 0x02C8	; 0x8002c8 <IR_AC_Signal_max+0x1>
    1106:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <IR_AC_Max+0x1>
    110a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <IR_AC_Max>
    IR_AC_Min = IR_AC_Signal_min;
    110e:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <IR_AC_Signal_min>
    1112:	70 91 ca 02 	lds	r23, 0x02CA	; 0x8002ca <IR_AC_Signal_min+0x1>
    1116:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <IR_AC_Min+0x1>
    111a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <IR_AC_Min>

    positiveEdge = 1;
    111e:	e1 e0       	ldi	r30, 0x01	; 1
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	f0 93 c4 02 	sts	0x02C4, r31	; 0x8002c4 <positiveEdge+0x1>
    1126:	e0 93 c3 02 	sts	0x02C3, r30	; 0x8002c3 <positiveEdge>
    negativeEdge = 0;
    112a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <negativeEdge+0x1>
    112e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <negativeEdge>
    IR_AC_Signal_max = 0;
    1132:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <IR_AC_Signal_max+0x1>
    1136:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <IR_AC_Signal_max>

    //if ((IR_AC_Max - IR_AC_Min) > 100 & (IR_AC_Max - IR_AC_Min) < 1000)
    if ((IR_AC_Max - IR_AC_Min) > 20 & (IR_AC_Max - IR_AC_Min) < 1000)
    113a:	26 1b       	sub	r18, r22
    113c:	37 0b       	sbc	r19, r23
    113e:	25 51       	subi	r18, 0x15	; 21
    1140:	31 09       	sbc	r19, r1
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	23 3d       	cpi	r18, 0xD3	; 211
    1146:	33 40       	sbci	r19, 0x03	; 3
    1148:	08 f0       	brcs	.+2      	; 0x114c <_Z12checkForBeatl+0xa0>
//  Heart Rate Monitor functions takes a sample value and the sample number
//  Returns true if a beat is detected
//  A running average of four samples is recommended for display on the screen.
bool checkForBeat(int32_t sample)
{
  bool beatDetected = false;
    114a:	60 e0       	ldi	r22, 0x00	; 0
      beatDetected = true;
    }
  }

  //  Detect negative zero crossing (falling edge)
  if ((IR_AC_Signal_Previous > 0) & (IR_AC_Signal_Current <= 0))
    114c:	14 16       	cp	r1, r20
    114e:	15 06       	cpc	r1, r21
    1150:	8c f4       	brge	.+34     	; 0x1174 <_Z12checkForBeatl+0xc8>
    1152:	18 16       	cp	r1, r24
    1154:	19 06       	cpc	r1, r25
    1156:	74 f0       	brlt	.+28     	; 0x1174 <_Z12checkForBeatl+0xc8>
  {
    positiveEdge = 0;
    1158:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <positiveEdge+0x1>
    115c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <positiveEdge>
    negativeEdge = 1;
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	30 93 c2 02 	sts	0x02C2, r19	; 0x8002c2 <negativeEdge+0x1>
    1168:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <negativeEdge>
    IR_AC_Signal_min = 0;
    116c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <IR_AC_Signal_min+0x1>
    1170:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <IR_AC_Signal_min>
  }

  //  Find Maximum value in positive cycle
  if (positiveEdge & (IR_AC_Signal_Current > IR_AC_Signal_Previous))
    1174:	e1 e0       	ldi	r30, 0x01	; 1
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	48 17       	cp	r20, r24
    117a:	59 07       	cpc	r21, r25
    117c:	14 f0       	brlt	.+4      	; 0x1182 <_Z12checkForBeatl+0xd6>
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <positiveEdge>
    1186:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <positiveEdge+0x1>
    118a:	2e 23       	and	r18, r30
    118c:	3f 23       	and	r19, r31
    118e:	23 2b       	or	r18, r19
    1190:	21 f0       	breq	.+8      	; 0x119a <_Z12checkForBeatl+0xee>
  {
    IR_AC_Signal_max = IR_AC_Signal_Current;
    1192:	90 93 c8 02 	sts	0x02C8, r25	; 0x8002c8 <IR_AC_Signal_max+0x1>
    1196:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <IR_AC_Signal_max>
  }

  //  Find Minimum value in negative cycle
  if (negativeEdge & (IR_AC_Signal_Current < IR_AC_Signal_Previous))
    119a:	e1 e0       	ldi	r30, 0x01	; 1
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	84 17       	cp	r24, r20
    11a0:	95 07       	cpc	r25, r21
    11a2:	14 f0       	brlt	.+4      	; 0x11a8 <_Z12checkForBeatl+0xfc>
    11a4:	e0 e0       	ldi	r30, 0x00	; 0
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <negativeEdge>
    11ac:	30 91 c2 02 	lds	r19, 0x02C2	; 0x8002c2 <negativeEdge+0x1>
    11b0:	2e 23       	and	r18, r30
    11b2:	3f 23       	and	r19, r31
    11b4:	23 2b       	or	r18, r19
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <_Z12checkForBeatl+0x114>
  {
    IR_AC_Signal_min = IR_AC_Signal_Current;
    11b8:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <IR_AC_Signal_min+0x1>
    11bc:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <IR_AC_Signal_min>
  }
  
  return(beatDetected);
}
    11c0:	86 2f       	mov	r24, r22
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	08 95       	ret

000011cc <_ZN8MAX30105C1Ev>:

//Set number of samples to trigger the almost full interrupt (Page 18)
//Power on default is 32 samples
//Note it is reverse: 0x00 is 32 samples, 0x0F is 17 samples
void MAX30105::setFIFOAlmostFull(uint8_t numberOfSamples) {
  bitMask(MAX30105_FIFOCONFIG, MAX30105_A_FULL_MASK, numberOfSamples);
    11cc:	08 95       	ret

000011ce <_ZN8MAX3010513readRegister8Ehh>:
    11ce:	0f 93       	push	r16
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
    11d8:	16 2f       	mov	r17, r22
    11da:	04 2f       	mov	r16, r20
    11dc:	88 81       	ld	r24, Y
    11de:	99 81       	ldd	r25, Y+1	; 0x01
    11e0:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN7TwoWire17beginTransmissionEh>
    11e4:	88 81       	ld	r24, Y
    11e6:	99 81       	ldd	r25, Y+1	; 0x01
    11e8:	dc 01       	movw	r26, r24
    11ea:	ed 91       	ld	r30, X+
    11ec:	fc 91       	ld	r31, X
    11ee:	01 90       	ld	r0, Z+
    11f0:	f0 81       	ld	r31, Z
    11f2:	e0 2d       	mov	r30, r0
    11f4:	60 2f       	mov	r22, r16
    11f6:	09 95       	icall
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	88 81       	ld	r24, Y
    11fc:	99 81       	ldd	r25, Y+1	; 0x01
    11fe:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <_ZN7TwoWire15endTransmissionEh>
    1202:	41 e0       	ldi	r20, 0x01	; 1
    1204:	61 2f       	mov	r22, r17
    1206:	88 81       	ld	r24, Y
    1208:	99 81       	ldd	r25, Y+1	; 0x01
    120a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN7TwoWire11requestFromEhh>
    120e:	88 81       	ld	r24, Y
    1210:	99 81       	ldd	r25, Y+1	; 0x01
    1212:	dc 01       	movw	r26, r24
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	00 84       	ldd	r0, Z+8	; 0x08
    121a:	f1 85       	ldd	r31, Z+9	; 0x09
    121c:	e0 2d       	mov	r30, r0
    121e:	09 95       	icall
    1220:	89 2b       	or	r24, r25
    1222:	51 f0       	breq	.+20     	; 0x1238 <_ZN8MAX3010513readRegister8Ehh+0x6a>
    1224:	88 81       	ld	r24, Y
    1226:	99 81       	ldd	r25, Y+1	; 0x01
    1228:	dc 01       	movw	r26, r24
    122a:	ed 91       	ld	r30, X+
    122c:	fc 91       	ld	r31, X
    122e:	02 84       	ldd	r0, Z+10	; 0x0a
    1230:	f3 85       	ldd	r31, Z+11	; 0x0b
    1232:	e0 2d       	mov	r30, r0
    1234:	09 95       	icall
    1236:	01 c0       	rjmp	.+2      	; 0x123a <_ZN8MAX3010513readRegister8Ehh+0x6c>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	08 95       	ret

00001244 <_ZN8MAX3010515getWritePointerEv>:
    1244:	44 e0       	ldi	r20, 0x04	; 4
    1246:	fc 01       	movw	r30, r24
    1248:	62 81       	ldd	r22, Z+2	; 0x02
    124a:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <_ZN8MAX3010513readRegister8Ehh>

0000124e <_ZN8MAX3010514getReadPointerEv>:
    124e:	46 e0       	ldi	r20, 0x06	; 6
    1250:	fc 01       	movw	r30, r24
    1252:	62 81       	ldd	r22, Z+2	; 0x02
    1254:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <_ZN8MAX3010513readRegister8Ehh>

00001258 <_ZN8MAX301055checkEv>:
    1258:	4f 92       	push	r4
    125a:	5f 92       	push	r5
    125c:	6f 92       	push	r6
    125e:	7f 92       	push	r7
    1260:	af 92       	push	r10
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	0e 94 27 09 	call	0x124e	; 0x124e <_ZN8MAX3010514getReadPointerEv>
    127a:	f8 2e       	mov	r15, r24
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 22 09 	call	0x1244	; 0x1244 <_ZN8MAX3010515getWritePointerEv>
    1282:	f8 16       	cp	r15, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <_ZN8MAX301055checkEv+0x30>
    1286:	ea c0       	rjmp	.+468    	; 0x145c <_ZN8MAX301055checkEv+0x204>
    1288:	08 2f       	mov	r16, r24
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	0f 19       	sub	r16, r15
    128e:	11 09       	sbc	r17, r1
    1290:	17 ff       	sbrs	r17, 7
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <_ZN8MAX301055checkEv+0x40>
    1294:	00 5e       	subi	r16, 0xE0	; 224
    1296:	1f 4f       	sbci	r17, 0xFF	; 255
    1298:	2b 81       	ldd	r18, Y+3	; 0x03
    129a:	20 9f       	mul	r18, r16
    129c:	c0 01       	movw	r24, r0
    129e:	21 9f       	mul	r18, r17
    12a0:	90 0d       	add	r25, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	7c 01       	movw	r14, r24
    12a6:	ee 0c       	add	r14, r14
    12a8:	ff 1c       	adc	r15, r15
    12aa:	e8 0e       	add	r14, r24
    12ac:	f9 1e       	adc	r15, r25
    12ae:	67 e5       	ldi	r22, 0x57	; 87
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	88 81       	ld	r24, Y
    12b4:	99 81       	ldd	r25, Y+1	; 0x01
    12b6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN7TwoWire17beginTransmissionEi>
    12ba:	88 81       	ld	r24, Y
    12bc:	99 81       	ldd	r25, Y+1	; 0x01
    12be:	dc 01       	movw	r26, r24
    12c0:	ed 91       	ld	r30, X+
    12c2:	fc 91       	ld	r31, X
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	67 e0       	ldi	r22, 0x07	; 7
    12cc:	09 95       	icall
    12ce:	88 81       	ld	r24, Y
    12d0:	99 81       	ldd	r25, Y+1	; 0x01
    12d2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN7TwoWire15endTransmissionEv>
    12d6:	30 e2       	ldi	r19, 0x20	; 32
    12d8:	a3 2e       	mov	r10, r19
    12da:	b1 2c       	mov	r11, r1
    12dc:	1e 14       	cp	r1, r14
    12de:	1f 04       	cpc	r1, r15
    12e0:	0c f0       	brlt	.+2      	; 0x12e4 <_ZN8MAX301055checkEv+0x8c>
    12e2:	be c0       	rjmp	.+380    	; 0x1460 <_ZN8MAX301055checkEv+0x208>
    12e4:	b1 e2       	ldi	r27, 0x21	; 33
    12e6:	eb 16       	cp	r14, r27
    12e8:	f1 04       	cpc	r15, r1
    12ea:	64 f0       	brlt	.+24     	; 0x1304 <_ZN8MAX301055checkEv+0xac>
    12ec:	6b 81       	ldd	r22, Y+3	; 0x03
    12ee:	33 e0       	ldi	r19, 0x03	; 3
    12f0:	63 9f       	mul	r22, r19
    12f2:	b0 01       	movw	r22, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	c5 01       	movw	r24, r10
    12f8:	0e 94 1e 11 	call	0x223c	; 0x223c <__divmodhi4>
    12fc:	65 01       	movw	r12, r10
    12fe:	c8 1a       	sub	r12, r24
    1300:	d9 0a       	sbc	r13, r25
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <_ZN8MAX301055checkEv+0xae>
    1304:	67 01       	movw	r12, r14
    1306:	ec 18       	sub	r14, r12
    1308:	fd 08       	sbc	r15, r13
    130a:	a6 01       	movw	r20, r12
    130c:	67 e5       	ldi	r22, 0x57	; 87
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	88 81       	ld	r24, Y
    1312:	99 81       	ldd	r25, Y+1	; 0x01
    1314:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZN7TwoWire11requestFromEii>
    1318:	1c 14       	cp	r1, r12
    131a:	1d 04       	cpc	r1, r13
    131c:	fc f6       	brge	.-66     	; 0x12dc <_ZN8MAX301055checkEv+0x84>
    131e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sense+0x30>
    1322:	8f 5f       	subi	r24, 0xFF	; 255
    1324:	83 70       	andi	r24, 0x03	; 3
    1326:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <sense+0x30>
    132a:	71 2c       	mov	r7, r1
    132c:	88 81       	ld	r24, Y
    132e:	99 81       	ldd	r25, Y+1	; 0x01
    1330:	dc 01       	movw	r26, r24
    1332:	ed 91       	ld	r30, X+
    1334:	fc 91       	ld	r31, X
    1336:	02 84       	ldd	r0, Z+10	; 0x0a
    1338:	f3 85       	ldd	r31, Z+11	; 0x0b
    133a:	e0 2d       	mov	r30, r0
    133c:	09 95       	icall
    133e:	68 2e       	mov	r6, r24
    1340:	88 81       	ld	r24, Y
    1342:	99 81       	ldd	r25, Y+1	; 0x01
    1344:	dc 01       	movw	r26, r24
    1346:	ed 91       	ld	r30, X+
    1348:	fc 91       	ld	r31, X
    134a:	02 84       	ldd	r0, Z+10	; 0x0a
    134c:	f3 85       	ldd	r31, Z+11	; 0x0b
    134e:	e0 2d       	mov	r30, r0
    1350:	09 95       	icall
    1352:	58 2e       	mov	r5, r24
    1354:	88 81       	ld	r24, Y
    1356:	99 81       	ldd	r25, Y+1	; 0x01
    1358:	dc 01       	movw	r26, r24
    135a:	ed 91       	ld	r30, X+
    135c:	fc 91       	ld	r31, X
    135e:	02 84       	ldd	r0, Z+10	; 0x0a
    1360:	f3 85       	ldd	r31, Z+11	; 0x0b
    1362:	e0 2d       	mov	r30, r0
    1364:	09 95       	icall
    1366:	48 2e       	mov	r4, r24
    1368:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <sense+0x30>
    136c:	b4 e0       	ldi	r27, 0x04	; 4
    136e:	eb 9f       	mul	r30, r27
    1370:	f0 01       	movw	r30, r0
    1372:	11 24       	eor	r1, r1
    1374:	e1 53       	subi	r30, 0x31	; 49
    1376:	fd 4f       	sbci	r31, 0xFD	; 253
    1378:	d3 01       	movw	r26, r6
    137a:	c2 01       	movw	r24, r4
    137c:	a3 70       	andi	r26, 0x03	; 3
    137e:	bb 27       	eor	r27, r27
    1380:	80 83       	st	Z, r24
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	a2 83       	std	Z+2, r26	; 0x02
    1386:	b3 83       	std	Z+3, r27	; 0x03
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	70 f1       	brcs	.+92     	; 0x13ea <_ZN8MAX301055checkEv+0x192>
    138e:	88 81       	ld	r24, Y
    1390:	99 81       	ldd	r25, Y+1	; 0x01
    1392:	dc 01       	movw	r26, r24
    1394:	ed 91       	ld	r30, X+
    1396:	fc 91       	ld	r31, X
    1398:	02 84       	ldd	r0, Z+10	; 0x0a
    139a:	f3 85       	ldd	r31, Z+11	; 0x0b
    139c:	e0 2d       	mov	r30, r0
    139e:	09 95       	icall
    13a0:	68 2e       	mov	r6, r24
    13a2:	88 81       	ld	r24, Y
    13a4:	99 81       	ldd	r25, Y+1	; 0x01
    13a6:	dc 01       	movw	r26, r24
    13a8:	ed 91       	ld	r30, X+
    13aa:	fc 91       	ld	r31, X
    13ac:	02 84       	ldd	r0, Z+10	; 0x0a
    13ae:	f3 85       	ldd	r31, Z+11	; 0x0b
    13b0:	e0 2d       	mov	r30, r0
    13b2:	09 95       	icall
    13b4:	58 2e       	mov	r5, r24
    13b6:	88 81       	ld	r24, Y
    13b8:	99 81       	ldd	r25, Y+1	; 0x01
    13ba:	dc 01       	movw	r26, r24
    13bc:	ed 91       	ld	r30, X+
    13be:	fc 91       	ld	r31, X
    13c0:	02 84       	ldd	r0, Z+10	; 0x0a
    13c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    13c4:	e0 2d       	mov	r30, r0
    13c6:	09 95       	icall
    13c8:	48 2e       	mov	r4, r24
    13ca:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <sense+0x30>
    13ce:	b4 e0       	ldi	r27, 0x04	; 4
    13d0:	eb 9f       	mul	r30, r27
    13d2:	f0 01       	movw	r30, r0
    13d4:	11 24       	eor	r1, r1
    13d6:	e1 52       	subi	r30, 0x21	; 33
    13d8:	fd 4f       	sbci	r31, 0xFD	; 253
    13da:	d3 01       	movw	r26, r6
    13dc:	c2 01       	movw	r24, r4
    13de:	a3 70       	andi	r26, 0x03	; 3
    13e0:	bb 27       	eor	r27, r27
    13e2:	80 83       	st	Z, r24
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	a2 83       	std	Z+2, r26	; 0x02
    13e8:	b3 83       	std	Z+3, r27	; 0x03
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	83 30       	cpi	r24, 0x03	; 3
    13ee:	70 f1       	brcs	.+92     	; 0x144c <_ZN8MAX301055checkEv+0x1f4>
    13f0:	88 81       	ld	r24, Y
    13f2:	99 81       	ldd	r25, Y+1	; 0x01
    13f4:	dc 01       	movw	r26, r24
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	02 84       	ldd	r0, Z+10	; 0x0a
    13fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    13fe:	e0 2d       	mov	r30, r0
    1400:	09 95       	icall
    1402:	68 2e       	mov	r6, r24
    1404:	88 81       	ld	r24, Y
    1406:	99 81       	ldd	r25, Y+1	; 0x01
    1408:	dc 01       	movw	r26, r24
    140a:	ed 91       	ld	r30, X+
    140c:	fc 91       	ld	r31, X
    140e:	02 84       	ldd	r0, Z+10	; 0x0a
    1410:	f3 85       	ldd	r31, Z+11	; 0x0b
    1412:	e0 2d       	mov	r30, r0
    1414:	09 95       	icall
    1416:	58 2e       	mov	r5, r24
    1418:	88 81       	ld	r24, Y
    141a:	99 81       	ldd	r25, Y+1	; 0x01
    141c:	dc 01       	movw	r26, r24
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	02 84       	ldd	r0, Z+10	; 0x0a
    1424:	f3 85       	ldd	r31, Z+11	; 0x0b
    1426:	e0 2d       	mov	r30, r0
    1428:	09 95       	icall
    142a:	48 2e       	mov	r4, r24
    142c:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <sense+0x30>
    1430:	b4 e0       	ldi	r27, 0x04	; 4
    1432:	eb 9f       	mul	r30, r27
    1434:	f0 01       	movw	r30, r0
    1436:	11 24       	eor	r1, r1
    1438:	e1 51       	subi	r30, 0x11	; 17
    143a:	fd 4f       	sbci	r31, 0xFD	; 253
    143c:	d3 01       	movw	r26, r6
    143e:	c2 01       	movw	r24, r4
    1440:	a3 70       	andi	r26, 0x03	; 3
    1442:	bb 27       	eor	r27, r27
    1444:	80 83       	st	Z, r24
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	a2 83       	std	Z+2, r26	; 0x02
    144a:	b3 83       	std	Z+3, r27	; 0x03
    144c:	2b 81       	ldd	r18, Y+3	; 0x03
    144e:	3d ef       	ldi	r19, 0xFD	; 253
    1450:	32 03       	mulsu	r19, r18
    1452:	c0 01       	movw	r24, r0
    1454:	11 24       	eor	r1, r1
    1456:	c8 0e       	add	r12, r24
    1458:	d9 1e       	adc	r13, r25
    145a:	5e cf       	rjmp	.-324    	; 0x1318 <_ZN8MAX301055checkEv+0xc0>
    145c:	00 e0       	ldi	r16, 0x00	; 0
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	c8 01       	movw	r24, r16
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	7f 90       	pop	r7
    1478:	6f 90       	pop	r6
    147a:	5f 90       	pop	r5
    147c:	4f 90       	pop	r4
    147e:	08 95       	ret

00001480 <_ZN8MAX301059safeCheckEh>:
    1480:	8f 92       	push	r8
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
    1496:	c6 2e       	mov	r12, r22
    1498:	0e 94 0d 07 	call	0xe1a	; 0xe1a <millis>
    149c:	4b 01       	movw	r8, r22
    149e:	5c 01       	movw	r10, r24
    14a0:	d1 2c       	mov	r13, r1
    14a2:	e1 2c       	mov	r14, r1
    14a4:	f1 2c       	mov	r15, r1
    14a6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <millis>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	88 19       	sub	r24, r8
    14b0:	99 09       	sbc	r25, r9
    14b2:	aa 09       	sbc	r26, r10
    14b4:	bb 09       	sbc	r27, r11
    14b6:	c8 16       	cp	r12, r24
    14b8:	d9 06       	cpc	r13, r25
    14ba:	ea 06       	cpc	r14, r26
    14bc:	fb 06       	cpc	r15, r27
    14be:	60 f0       	brcs	.+24     	; 0x14d8 <_ZN8MAX301059safeCheckEh+0x58>
    14c0:	ce 01       	movw	r24, r28
    14c2:	0e 94 2c 09 	call	0x1258	; 0x1258 <_ZN8MAX301055checkEv>
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	49 f0       	breq	.+18     	; 0x14dc <_ZN8MAX301059safeCheckEh+0x5c>
    14ca:	61 e0       	ldi	r22, 0x01	; 1
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 3e 07 	call	0xe7c	; 0xe7c <delay>
    14d6:	e7 cf       	rjmp	.-50     	; 0x14a6 <_ZN8MAX301059safeCheckEh+0x26>
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	01 c0       	rjmp	.+2      	; 0x14de <_ZN8MAX301059safeCheckEh+0x5e>
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	9f 90       	pop	r9
    14f0:	8f 90       	pop	r8
    14f2:	08 95       	ret

000014f4 <_ZN8MAX301055getIREv>:
    14f4:	6a ef       	ldi	r22, 0xFA	; 250
    14f6:	0e 94 40 0a 	call	0x1480	; 0x1480 <_ZN8MAX301059safeCheckEh>
    14fa:	88 23       	and	r24, r24
    14fc:	69 f0       	breq	.+26     	; 0x1518 <_ZN8MAX301055getIREv+0x24>
    14fe:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <sense+0x30>
    1502:	84 e0       	ldi	r24, 0x04	; 4
    1504:	e8 9f       	mul	r30, r24
    1506:	f0 01       	movw	r30, r0
    1508:	11 24       	eor	r1, r1
    150a:	e1 52       	subi	r30, 0x21	; 33
    150c:	fd 4f       	sbci	r31, 0xFD	; 253
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	08 95       	ret
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	cb 01       	movw	r24, r22
    151e:	08 95       	ret

00001520 <_ZN8MAX3010510readPartIDEv>:
    1520:	4f ef       	ldi	r20, 0xFF	; 255
    1522:	fc 01       	movw	r30, r24
    1524:	62 81       	ldd	r22, Z+2	; 0x02
    1526:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <_ZN8MAX3010513readRegister8Ehh>

0000152a <_ZN8MAX3010514readRevisionIDEv>:
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24
    1530:	4e ef       	ldi	r20, 0xFE	; 254
    1532:	6a 81       	ldd	r22, Y+2	; 0x02
    1534:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN8MAX3010513readRegister8Ehh>
    1538:	8c 83       	std	Y+4, r24	; 0x04
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <_ZN8MAX301055beginER7TwoWiremh>:
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
    1550:	cb 01       	movw	r24, r22
    1552:	69 01       	movw	r12, r18
    1554:	7a 01       	movw	r14, r20
    1556:	79 83       	std	Y+1, r23	; 0x01
    1558:	68 83       	st	Y, r22
    155a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <_ZN7TwoWire5beginEv>
    155e:	b7 01       	movw	r22, r14
    1560:	a6 01       	movw	r20, r12
    1562:	88 81       	ld	r24, Y
    1564:	99 81       	ldd	r25, Y+1	; 0x01
    1566:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_ZN7TwoWire8setClockEm>
    156a:	0a 83       	std	Y+2, r16	; 0x02
    156c:	ce 01       	movw	r24, r28
    156e:	0e 94 90 0a 	call	0x1520	; 0x1520 <_ZN8MAX3010510readPartIDEv>
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZN8MAX3010514readRevisionIDEv>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	cf 90       	pop	r12
    1588:	08 95       	ret

0000158a <_ZN8MAX3010514writeRegister8Ehhh>:
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
    1594:	04 2f       	mov	r16, r20
    1596:	12 2f       	mov	r17, r18
    1598:	88 81       	ld	r24, Y
    159a:	99 81       	ldd	r25, Y+1	; 0x01
    159c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN7TwoWire17beginTransmissionEh>
    15a0:	88 81       	ld	r24, Y
    15a2:	99 81       	ldd	r25, Y+1	; 0x01
    15a4:	dc 01       	movw	r26, r24
    15a6:	ed 91       	ld	r30, X+
    15a8:	fc 91       	ld	r31, X
    15aa:	01 90       	ld	r0, Z+
    15ac:	f0 81       	ld	r31, Z
    15ae:	e0 2d       	mov	r30, r0
    15b0:	60 2f       	mov	r22, r16
    15b2:	09 95       	icall
    15b4:	88 81       	ld	r24, Y
    15b6:	99 81       	ldd	r25, Y+1	; 0x01
    15b8:	dc 01       	movw	r26, r24
    15ba:	ed 91       	ld	r30, X+
    15bc:	fc 91       	ld	r31, X
    15be:	01 90       	ld	r0, Z+
    15c0:	f0 81       	ld	r31, Z
    15c2:	e0 2d       	mov	r30, r0
    15c4:	61 2f       	mov	r22, r17
    15c6:	09 95       	icall
    15c8:	88 81       	ld	r24, Y
    15ca:	99 81       	ldd	r25, Y+1	; 0x01
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <_ZN7TwoWire15endTransmissionEv>

000015d8 <_ZN8MAX3010520setPulseAmplitudeRedEh>:
    15d8:	26 2f       	mov	r18, r22
    15da:	4c e0       	ldi	r20, 0x0C	; 12
    15dc:	fc 01       	movw	r30, r24
    15de:	62 81       	ldd	r22, Z+2	; 0x02
    15e0:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>

000015e4 <_ZN8MAX3010519setPulseAmplitudeIREh>:
    15e4:	26 2f       	mov	r18, r22
    15e6:	4d e0       	ldi	r20, 0x0D	; 13
    15e8:	fc 01       	movw	r30, r24
    15ea:	62 81       	ldd	r22, Z+2	; 0x02
    15ec:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>

000015f0 <_ZN8MAX3010522setPulseAmplitudeGreenEh>:
    15f0:	26 2f       	mov	r18, r22
    15f2:	4e e0       	ldi	r20, 0x0E	; 14
    15f4:	fc 01       	movw	r30, r24
    15f6:	62 81       	ldd	r22, Z+2	; 0x02
    15f8:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>

000015fc <_ZN8MAX3010526setPulseAmplitudeProximityEh>:
    15fc:	26 2f       	mov	r18, r22
    15fe:	40 e1       	ldi	r20, 0x10	; 16
    1600:	fc 01       	movw	r30, r24
    1602:	62 81       	ldd	r22, Z+2	; 0x02
    1604:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>

00001608 <_ZN8MAX301059clearFIFOEv>:
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ec 01       	movw	r28, r24
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	44 e0       	ldi	r20, 0x04	; 4
    1612:	6a 81       	ldd	r22, Y+2	; 0x02
    1614:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	45 e0       	ldi	r20, 0x05	; 5
    161c:	6a 81       	ldd	r22, Y+2	; 0x02
    161e:	ce 01       	movw	r24, r28
    1620:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	46 e0       	ldi	r20, 0x06	; 6
    1628:	6a 81       	ldd	r22, Y+2	; 0x02
    162a:	ce 01       	movw	r24, r28
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>

00001634 <_ZN8MAX301057bitMaskEhhh>:
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
    163e:	ec 01       	movw	r28, r24
    1640:	f6 2e       	mov	r15, r22
    1642:	04 2f       	mov	r16, r20
    1644:	12 2f       	mov	r17, r18
    1646:	46 2f       	mov	r20, r22
    1648:	6a 81       	ldd	r22, Y+2	; 0x02
    164a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN8MAX3010513readRegister8Ehh>
    164e:	80 23       	and	r24, r16
    1650:	28 2f       	mov	r18, r24
    1652:	21 2b       	or	r18, r17
    1654:	4f 2d       	mov	r20, r15
    1656:	6a 81       	ldd	r22, Y+2	; 0x02
    1658:	ce 01       	movw	r24, r28
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <_ZN8MAX3010514writeRegister8Ehhh>

00001668 <_ZN8MAX301059softResetEv>:
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	ec 01       	movw	r28, r24
    1676:	20 e4       	ldi	r18, 0x40	; 64
    1678:	4f eb       	ldi	r20, 0xBF	; 191
    167a:	69 e0       	ldi	r22, 0x09	; 9
    167c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>
    1680:	0e 94 0d 07 	call	0xe1a	; 0xe1a <millis>
    1684:	6b 01       	movw	r12, r22
    1686:	7c 01       	movw	r14, r24
    1688:	0e 94 0d 07 	call	0xe1a	; 0xe1a <millis>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8c 19       	sub	r24, r12
    1692:	9d 09       	sbc	r25, r13
    1694:	ae 09       	sbc	r26, r14
    1696:	bf 09       	sbc	r27, r15
    1698:	84 36       	cpi	r24, 0x64	; 100
    169a:	91 05       	cpc	r25, r1
    169c:	a1 05       	cpc	r26, r1
    169e:	b1 05       	cpc	r27, r1
    16a0:	70 f4       	brcc	.+28     	; 0x16be <_ZN8MAX301059softResetEv+0x56>
    16a2:	49 e0       	ldi	r20, 0x09	; 9
    16a4:	6a 81       	ldd	r22, Y+2	; 0x02
    16a6:	ce 01       	movw	r24, r28
    16a8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <_ZN8MAX3010513readRegister8Ehh>
    16ac:	86 ff       	sbrs	r24, 6
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <_ZN8MAX301059softResetEv+0x56>
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <delay>
    16bc:	e5 cf       	rjmp	.-54     	; 0x1688 <_ZN8MAX301059softResetEv+0x20>
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	df 90       	pop	r13
    16c8:	cf 90       	pop	r12
    16ca:	08 95       	ret

000016cc <_ZN8MAX3010510setLEDModeEh>:
    16cc:	26 2f       	mov	r18, r22
    16ce:	48 ef       	ldi	r20, 0xF8	; 248
    16d0:	69 e0       	ldi	r22, 0x09	; 9
    16d2:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

000016d6 <_ZN8MAX3010511setADCRangeEh>:
    16d6:	26 2f       	mov	r18, r22
    16d8:	4f e9       	ldi	r20, 0x9F	; 159
    16da:	6a e0       	ldi	r22, 0x0A	; 10
    16dc:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

000016e0 <_ZN8MAX3010513setSampleRateEh>:
    16e0:	26 2f       	mov	r18, r22
    16e2:	43 ee       	ldi	r20, 0xE3	; 227
    16e4:	6a e0       	ldi	r22, 0x0A	; 10
    16e6:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

000016ea <_ZN8MAX3010513setPulseWidthEh>:
    16ea:	26 2f       	mov	r18, r22
    16ec:	4c ef       	ldi	r20, 0xFC	; 252
    16ee:	6a e0       	ldi	r22, 0x0A	; 10
    16f0:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

000016f4 <_ZN8MAX3010514setFIFOAverageEh>:
    16f4:	26 2f       	mov	r18, r22
    16f6:	4f e1       	ldi	r20, 0x1F	; 31
    16f8:	68 e0       	ldi	r22, 0x08	; 8
    16fa:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

000016fe <_ZN8MAX3010518enableFIFORolloverEv>:
    16fe:	20 e1       	ldi	r18, 0x10	; 16
    1700:	4f ee       	ldi	r20, 0xEF	; 239
    1702:	68 e0       	ldi	r22, 0x08	; 8
    1704:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

00001708 <_ZN8MAX3010510enableSlotEhh>:

//Given a slot number assign a thing to it
//Devices are SLOT_RED_LED or SLOT_RED_PILOT (proximity)
//Assigning a SLOT_RED_LED will pulse LED
//Assigning a SLOT_RED_PILOT will ??
void MAX30105::enableSlot(uint8_t slotNumber, uint8_t device) {
    1708:	24 2f       	mov	r18, r20

  uint8_t originalContents;

  switch (slotNumber) {
    170a:	62 30       	cpi	r22, 0x02	; 2
    170c:	59 f0       	breq	.+22     	; 0x1724 <_ZN8MAX3010510enableSlotEhh+0x1c>
    170e:	18 f4       	brcc	.+6      	; 0x1716 <_ZN8MAX3010510enableSlotEhh+0xe>
    1710:	61 30       	cpi	r22, 0x01	; 1
    1712:	31 f0       	breq	.+12     	; 0x1720 <_ZN8MAX3010510enableSlotEhh+0x18>
    1714:	08 95       	ret
    1716:	63 30       	cpi	r22, 0x03	; 3
    1718:	51 f0       	breq	.+20     	; 0x172e <_ZN8MAX3010510enableSlotEhh+0x26>
    171a:	64 30       	cpi	r22, 0x04	; 4
    171c:	51 f0       	breq	.+20     	; 0x1732 <_ZN8MAX3010510enableSlotEhh+0x2a>
    171e:	08 95       	ret
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
    1720:	48 ef       	ldi	r20, 0xF8	; 248
    1722:	03 c0       	rjmp	.+6      	; 0x172a <_ZN8MAX3010510enableSlotEhh+0x22>
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
    1724:	22 95       	swap	r18
    1726:	20 7f       	andi	r18, 0xF0	; 240
    1728:	4f e8       	ldi	r20, 0x8F	; 143
    172a:	61 e1       	ldi	r22, 0x11	; 17
    172c:	06 c0       	rjmp	.+12     	; 0x173a <_ZN8MAX3010510enableSlotEhh+0x32>
      break;
    case (3):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT3_MASK, device);
    172e:	48 ef       	ldi	r20, 0xF8	; 248
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <_ZN8MAX3010510enableSlotEhh+0x30>
      break;
    case (4):
      bitMask(MAX30105_MULTILEDCONFIG2, MAX30105_SLOT4_MASK, device << 4);
    1732:	22 95       	swap	r18
    1734:	20 7f       	andi	r18, 0xF0	; 240
    1736:	4f e8       	ldi	r20, 0x8F	; 143
    1738:	62 e1       	ldi	r22, 0x12	; 18
    173a:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

0000173e <_ZN8MAX301055setupEhhhiii>:
// Sample Average = 4
// Mode = MultiLED
// ADC Range = 16384 (62.5pA per LSB)
// Sample rate = 50
//Use the default setup if you are just getting started with the MAX30105 sensor
void MAX30105::setup(byte powerLevel, byte sampleAverage, byte ledMode, int sampleRate, int pulseWidth, int adcRange) {
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ec 01       	movw	r28, r24
    1756:	96 2e       	mov	r9, r22
    1758:	b4 2e       	mov	r11, r20
    175a:	a2 2e       	mov	r10, r18
  softReset(); //Reset all configuration, threshold, and data registers to POR values
    175c:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN8MAX301059softResetEv>

  //FIFO Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  //The chip will average multiple samples of same type together if you wish
  if (sampleAverage == 1) setFIFOAverage(MAX30105_SAMPLEAVG_1); //No averaging per FIFO record
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	b8 12       	cpse	r11, r24
    1764:	02 c0       	rjmp	.+4      	; 0x176a <_ZN8MAX301055setupEhhhiii+0x2c>
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	18 c0       	rjmp	.+48     	; 0x179a <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 2) setFIFOAverage(MAX30105_SAMPLEAVG_2);
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	b8 12       	cpse	r11, r24
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <_ZN8MAX301055setupEhhhiii+0x36>
    1770:	60 e2       	ldi	r22, 0x20	; 32
    1772:	13 c0       	rjmp	.+38     	; 0x179a <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 4) setFIFOAverage(MAX30105_SAMPLEAVG_4);
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	b8 12       	cpse	r11, r24
    1778:	02 c0       	rjmp	.+4      	; 0x177e <_ZN8MAX301055setupEhhhiii+0x40>
    177a:	60 e4       	ldi	r22, 0x40	; 64
    177c:	0e c0       	rjmp	.+28     	; 0x179a <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 8) setFIFOAverage(MAX30105_SAMPLEAVG_8);
    177e:	88 e0       	ldi	r24, 0x08	; 8
    1780:	b8 12       	cpse	r11, r24
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <_ZN8MAX301055setupEhhhiii+0x4a>
    1784:	60 e6       	ldi	r22, 0x60	; 96
    1786:	09 c0       	rjmp	.+18     	; 0x179a <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 16) setFIFOAverage(MAX30105_SAMPLEAVG_16);
    1788:	80 e1       	ldi	r24, 0x10	; 16
    178a:	b8 12       	cpse	r11, r24
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <_ZN8MAX301055setupEhhhiii+0x54>
    178e:	60 e8       	ldi	r22, 0x80	; 128
    1790:	04 c0       	rjmp	.+8      	; 0x179a <_ZN8MAX301055setupEhhhiii+0x5c>
  else if (sampleAverage == 32) setFIFOAverage(MAX30105_SAMPLEAVG_32);
    1792:	80 e2       	ldi	r24, 0x20	; 32
    1794:	b8 12       	cpse	r11, r24
    1796:	f1 cf       	rjmp	.-30     	; 0x177a <_ZN8MAX301055setupEhhhiii+0x3c>
    1798:	60 ea       	ldi	r22, 0xA0	; 160
    179a:	ce 01       	movw	r24, r28
    179c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <_ZN8MAX3010514setFIFOAverageEh>
  else setFIFOAverage(MAX30105_SAMPLEAVG_4);

  //setFIFOAlmostFull(2); //Set to 30 samples to trigger an 'Almost Full' interrupt
  enableFIFORollover(); //Allow FIFO to wrap/roll over
    17a0:	ce 01       	movw	r24, r28
    17a2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN8MAX3010518enableFIFORolloverEv>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Mode Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if (ledMode == 3) setLEDMode(MAX30105_MODE_MULTILED); //Watch all three LED channels
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	a8 12       	cpse	r10, r24
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <_ZN8MAX301055setupEhhhiii+0x72>
    17ac:	67 e0       	ldi	r22, 0x07	; 7
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <_ZN8MAX301055setupEhhhiii+0x7e>
  else if (ledMode == 2) setLEDMode(MAX30105_MODE_REDIRONLY); //Red and IR
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	a8 12       	cpse	r10, r24
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <_ZN8MAX301055setupEhhhiii+0x7c>
    17b6:	63 e0       	ldi	r22, 0x03	; 3
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <_ZN8MAX301055setupEhhhiii+0x7e>
  else setLEDMode(MAX30105_MODE_REDONLY); //Red only
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN8MAX3010510setLEDModeEh>
  activeLEDs = ledMode; //Used to control how many bytes to read from FIFO buffer
    17c2:	ab 82       	std	Y+3, r10	; 0x03
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Particle Sensing Configuration
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  if(adcRange < 4096) setADCRange(MAX30105_ADCRANGE_2048); //7.81pA per LSB
    17c4:	c1 14       	cp	r12, r1
    17c6:	80 e1       	ldi	r24, 0x10	; 16
    17c8:	d8 06       	cpc	r13, r24
    17ca:	14 f4       	brge	.+4      	; 0x17d0 <_ZN8MAX301055setupEhhhiii+0x92>
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	11 c0       	rjmp	.+34     	; 0x17f2 <_ZN8MAX301055setupEhhhiii+0xb4>
  else if(adcRange < 8192) setADCRange(MAX30105_ADCRANGE_4096); //15.63pA per LSB
    17d0:	c1 14       	cp	r12, r1
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	d8 06       	cpc	r13, r24
    17d6:	14 f4       	brge	.+4      	; 0x17dc <_ZN8MAX301055setupEhhhiii+0x9e>
    17d8:	60 e2       	ldi	r22, 0x20	; 32
    17da:	0b c0       	rjmp	.+22     	; 0x17f2 <_ZN8MAX301055setupEhhhiii+0xb4>
  else if(adcRange < 16384) setADCRange(MAX30105_ADCRANGE_8192); //31.25pA per LSB
    17dc:	c1 14       	cp	r12, r1
    17de:	80 e4       	ldi	r24, 0x40	; 64
    17e0:	d8 06       	cpc	r13, r24
    17e2:	14 f4       	brge	.+4      	; 0x17e8 <_ZN8MAX301055setupEhhhiii+0xaa>
    17e4:	60 e4       	ldi	r22, 0x40	; 64
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <_ZN8MAX301055setupEhhhiii+0xb4>
  else if(adcRange == 16384) setADCRange(MAX30105_ADCRANGE_16384); //62.5pA per LSB
    17e8:	c1 14       	cp	r12, r1
    17ea:	80 e4       	ldi	r24, 0x40	; 64
    17ec:	d8 06       	cpc	r13, r24
    17ee:	71 f7       	brne	.-36     	; 0x17cc <_ZN8MAX301055setupEhhhiii+0x8e>
    17f0:	60 e6       	ldi	r22, 0x60	; 96
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_ZN8MAX3010511setADCRangeEh>
  else setADCRange(MAX30105_ADCRANGE_2048);

  if (sampleRate < 100) setSampleRate(MAX30105_SAMPLERATE_50); //Take 50 samples per second
    17f8:	04 36       	cpi	r16, 0x64	; 100
    17fa:	11 05       	cpc	r17, r1
    17fc:	14 f4       	brge	.+4      	; 0x1802 <_ZN8MAX301055setupEhhhiii+0xc4>
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	27 c0       	rjmp	.+78     	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 200) setSampleRate(MAX30105_SAMPLERATE_100);
    1802:	08 3c       	cpi	r16, 0xC8	; 200
    1804:	11 05       	cpc	r17, r1
    1806:	14 f4       	brge	.+4      	; 0x180c <_ZN8MAX301055setupEhhhiii+0xce>
    1808:	64 e0       	ldi	r22, 0x04	; 4
    180a:	22 c0       	rjmp	.+68     	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 400) setSampleRate(MAX30105_SAMPLERATE_200);
    180c:	00 39       	cpi	r16, 0x90	; 144
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	18 07       	cpc	r17, r24
    1812:	14 f4       	brge	.+4      	; 0x1818 <_ZN8MAX301055setupEhhhiii+0xda>
    1814:	68 e0       	ldi	r22, 0x08	; 8
    1816:	1c c0       	rjmp	.+56     	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 800) setSampleRate(MAX30105_SAMPLERATE_400);
    1818:	00 32       	cpi	r16, 0x20	; 32
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	18 07       	cpc	r17, r24
    181e:	14 f4       	brge	.+4      	; 0x1824 <_ZN8MAX301055setupEhhhiii+0xe6>
    1820:	6c e0       	ldi	r22, 0x0C	; 12
    1822:	16 c0       	rjmp	.+44     	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 1000) setSampleRate(MAX30105_SAMPLERATE_800);
    1824:	08 3e       	cpi	r16, 0xE8	; 232
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	18 07       	cpc	r17, r24
    182a:	14 f4       	brge	.+4      	; 0x1830 <_ZN8MAX301055setupEhhhiii+0xf2>
    182c:	60 e1       	ldi	r22, 0x10	; 16
    182e:	10 c0       	rjmp	.+32     	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 1600) setSampleRate(MAX30105_SAMPLERATE_1000);
    1830:	00 34       	cpi	r16, 0x40	; 64
    1832:	86 e0       	ldi	r24, 0x06	; 6
    1834:	18 07       	cpc	r17, r24
    1836:	14 f4       	brge	.+4      	; 0x183c <_ZN8MAX301055setupEhhhiii+0xfe>
    1838:	64 e1       	ldi	r22, 0x14	; 20
    183a:	0a c0       	rjmp	.+20     	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate < 3200) setSampleRate(MAX30105_SAMPLERATE_1600);
    183c:	00 38       	cpi	r16, 0x80	; 128
    183e:	8c e0       	ldi	r24, 0x0C	; 12
    1840:	18 07       	cpc	r17, r24
    1842:	14 f4       	brge	.+4      	; 0x1848 <_ZN8MAX301055setupEhhhiii+0x10a>
    1844:	68 e1       	ldi	r22, 0x18	; 24
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <_ZN8MAX301055setupEhhhiii+0x112>
  else if (sampleRate == 3200) setSampleRate(MAX30105_SAMPLERATE_3200);
    1848:	00 38       	cpi	r16, 0x80	; 128
    184a:	1c 40       	sbci	r17, 0x0C	; 12
    184c:	c1 f6       	brne	.-80     	; 0x17fe <_ZN8MAX301055setupEhhhiii+0xc0>
    184e:	6c e1       	ldi	r22, 0x1C	; 28
    1850:	ce 01       	movw	r24, r28
    1852:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZN8MAX3010513setSampleRateEh>
  else setSampleRate(MAX30105_SAMPLERATE_50);

  //The longer the pulse width the longer range of detection you'll have
  //At 69us and 0.4mA it's about 2 inches
  //At 411us and 0.4mA it's about 6 inches
  if (pulseWidth < 118) setPulseWidth(MAX30105_PULSEWIDTH_69); //Page 26, Gets us 15 bit resolution
    1856:	86 e7       	ldi	r24, 0x76	; 118
    1858:	e8 16       	cp	r14, r24
    185a:	f1 04       	cpc	r15, r1
    185c:	14 f4       	brge	.+4      	; 0x1862 <_ZN8MAX301055setupEhhhiii+0x124>
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	13 c0       	rjmp	.+38     	; 0x1888 <_ZN8MAX301055setupEhhhiii+0x14a>
  else if (pulseWidth < 215) setPulseWidth(MAX30105_PULSEWIDTH_118); //16 bit resolution
    1862:	87 ed       	ldi	r24, 0xD7	; 215
    1864:	e8 16       	cp	r14, r24
    1866:	f1 04       	cpc	r15, r1
    1868:	14 f4       	brge	.+4      	; 0x186e <_ZN8MAX301055setupEhhhiii+0x130>
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <_ZN8MAX301055setupEhhhiii+0x14a>
  else if (pulseWidth < 411) setPulseWidth(MAX30105_PULSEWIDTH_215); //17 bit resolution
    186e:	8b e9       	ldi	r24, 0x9B	; 155
    1870:	e8 16       	cp	r14, r24
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	f8 06       	cpc	r15, r24
    1876:	14 f4       	brge	.+4      	; 0x187c <_ZN8MAX301055setupEhhhiii+0x13e>
    1878:	62 e0       	ldi	r22, 0x02	; 2
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <_ZN8MAX301055setupEhhhiii+0x14a>
  else if (pulseWidth == 411) setPulseWidth(MAX30105_PULSEWIDTH_411); //18 bit resolution
    187c:	8b e9       	ldi	r24, 0x9B	; 155
    187e:	e8 16       	cp	r14, r24
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	f8 06       	cpc	r15, r24
    1884:	61 f7       	brne	.-40     	; 0x185e <_ZN8MAX301055setupEhhhiii+0x120>
    1886:	63 e0       	ldi	r22, 0x03	; 3
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <_ZN8MAX3010513setPulseWidthEh>
  //powerLevel = 0x02, 0.4mA - Presence detection of ~4 inch
  //powerLevel = 0x1F, 6.4mA - Presence detection of ~8 inch
  //powerLevel = 0x7F, 25.4mA - Presence detection of ~8 inch
  //powerLevel = 0xFF, 50.0mA - Presence detection of ~12 inch

  setPulseAmplitudeRed(powerLevel);
    188e:	69 2d       	mov	r22, r9
    1890:	ce 01       	movw	r24, r28
    1892:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN8MAX3010520setPulseAmplitudeRedEh>
  setPulseAmplitudeIR(powerLevel);
    1896:	69 2d       	mov	r22, r9
    1898:	ce 01       	movw	r24, r28
    189a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <_ZN8MAX3010519setPulseAmplitudeIREh>
  setPulseAmplitudeGreen(powerLevel);
    189e:	69 2d       	mov	r22, r9
    18a0:	ce 01       	movw	r24, r28
    18a2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN8MAX3010522setPulseAmplitudeGreenEh>
  setPulseAmplitudeProximity(powerLevel);
    18a6:	69 2d       	mov	r22, r9
    18a8:	ce 01       	movw	r24, r28
    18aa:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN8MAX3010526setPulseAmplitudeProximityEh>
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	ce 01       	movw	r24, r28
    18b4:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN8MAX3010510enableSlotEhh>
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	8a 15       	cp	r24, r10
    18bc:	70 f4       	brcc	.+28     	; 0x18da <_ZN8MAX301055setupEhhhiii+0x19c>
  switch (slotNumber) {
    case (1):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT1_MASK, device);
      break;
    case (2):
      bitMask(MAX30105_MULTILEDCONFIG1, MAX30105_SLOT2_MASK, device << 4);
    18be:	20 e2       	ldi	r18, 0x20	; 32
    18c0:	4f e8       	ldi	r20, 0x8F	; 143
    18c2:	61 e1       	ldi	r22, 0x11	; 17
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <_ZN8MAX301057bitMaskEhhh>

  //Multi-LED Mode Configuration, Enable the reading of the three LEDs
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  enableSlot(1, SLOT_RED_LED);
  if (ledMode > 1) enableSlot(2, SLOT_IR_LED);
  if (ledMode > 2) enableSlot(3, SLOT_GREEN_LED);
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	a8 16       	cp	r10, r24
    18ce:	29 f0       	breq	.+10     	; 0x18da <_ZN8MAX301055setupEhhhiii+0x19c>
    18d0:	43 e0       	ldi	r20, 0x03	; 3
    18d2:	63 e0       	ldi	r22, 0x03	; 3
    18d4:	ce 01       	movw	r24, r28
    18d6:	0e 94 84 0b 	call	0x1708	; 0x1708 <_ZN8MAX3010510enableSlotEhh>
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
    18da:	ce 01       	movw	r24, r28
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
  //enableSlot(1, SLOT_RED_PILOT);
  //enableSlot(2, SLOT_IR_PILOT);
  //enableSlot(3, SLOT_GREEN_PILOT);
  //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

  clearFIFO(); //Reset the FIFO before we begin checking the sensor
    18f2:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <_ZN8MAX301059clearFIFOEv>

000018f6 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    18f6:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN7TwoWire14rxBufferLengthE>
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	20 91 32 03 	lds	r18, 0x0332	; 0x800332 <_ZN7TwoWire13rxBufferIndexE>
    1900:	82 1b       	sub	r24, r18
    1902:	91 09       	sbc	r25, r1
    1904:	08 95       	ret

00001906 <_ZN7TwoWire4readEv>:
    1906:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <_ZN7TwoWire13rxBufferIndexE>
    190a:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN7TwoWire14rxBufferLengthE>
    190e:	98 17       	cp	r25, r24
    1910:	50 f4       	brcc	.+20     	; 0x1926 <_ZN7TwoWire4readEv+0x20>
    1912:	e9 2f       	mov	r30, r25
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	ed 5c       	subi	r30, 0xCD	; 205
    1918:	fc 4f       	sbci	r31, 0xFC	; 252
    191a:	20 81       	ld	r18, Z
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	9f 5f       	subi	r25, 0xFF	; 255
    1920:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <_ZN7TwoWire13rxBufferIndexE>
    1924:	02 c0       	rjmp	.+4      	; 0x192a <_ZN7TwoWire4readEv+0x24>
    1926:	2f ef       	ldi	r18, 0xFF	; 255
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	c9 01       	movw	r24, r18
    192c:	08 95       	ret

0000192e <_ZN7TwoWire4peekEv>:
    192e:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <_ZN7TwoWire13rxBufferIndexE>
    1932:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN7TwoWire14rxBufferLengthE>
    1936:	e8 17       	cp	r30, r24
    1938:	30 f4       	brcc	.+12     	; 0x1946 <_ZN7TwoWire4peekEv+0x18>
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	ed 5c       	subi	r30, 0xCD	; 205
    193e:	fc 4f       	sbci	r31, 0xFC	; 252
    1940:	80 81       	ld	r24, Z
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	08 95       	ret
    1946:	8f ef       	ldi	r24, 0xFF	; 255
    1948:	9f ef       	ldi	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <_ZN7TwoWire5flushEv>:
    194c:	08 95       	ret

0000194e <_ZN7TwoWire5writeEPKhj>:
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	7c 01       	movw	r14, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8a 01       	movw	r16, r20
    1964:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <_ZN7TwoWire12transmittingE>
    1968:	22 23       	and	r18, r18
    196a:	89 f0       	breq	.+34     	; 0x198e <_ZN7TwoWire5writeEPKhj+0x40>
    196c:	eb 01       	movw	r28, r22
    196e:	6b 01       	movw	r12, r22
    1970:	c4 0e       	add	r12, r20
    1972:	d5 1e       	adc	r13, r21
    1974:	cc 15       	cp	r28, r12
    1976:	dd 05       	cpc	r29, r13
    1978:	69 f0       	breq	.+26     	; 0x1994 <_ZN7TwoWire5writeEPKhj+0x46>
    197a:	69 91       	ld	r22, Y+
    197c:	d7 01       	movw	r26, r14
    197e:	ed 91       	ld	r30, X+
    1980:	fc 91       	ld	r31, X
    1982:	01 90       	ld	r0, Z+
    1984:	f0 81       	ld	r31, Z
    1986:	e0 2d       	mov	r30, r0
    1988:	c7 01       	movw	r24, r14
    198a:	09 95       	icall
    198c:	f3 cf       	rjmp	.-26     	; 0x1974 <_ZN7TwoWire5writeEPKhj+0x26>
    198e:	64 2f       	mov	r22, r20
    1990:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <twi_transmit>
    1994:	c8 01       	movw	r24, r16
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	df 90       	pop	r13
    19a4:	cf 90       	pop	r12
    19a6:	08 95       	ret

000019a8 <_ZN7TwoWire5writeEh>:
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
    19ac:	1f 92       	push	r1
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	69 83       	std	Y+1, r22	; 0x01
    19b4:	20 91 0d 03 	lds	r18, 0x030D	; 0x80030d <_ZN7TwoWire12transmittingE>
    19b8:	22 23       	and	r18, r18
    19ba:	d1 f0       	breq	.+52     	; 0x19f0 <_ZN7TwoWire5writeEh+0x48>
    19bc:	20 91 0e 03 	lds	r18, 0x030E	; 0x80030e <_ZN7TwoWire14txBufferLengthE>
    19c0:	20 32       	cpi	r18, 0x20	; 32
    19c2:	40 f0       	brcs	.+16     	; 0x19d4 <_ZN7TwoWire5writeEh+0x2c>
    19c4:	21 e0       	ldi	r18, 0x01	; 1
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	fc 01       	movw	r30, r24
    19ca:	33 83       	std	Z+3, r19	; 0x03
    19cc:	22 83       	std	Z+2, r18	; 0x02
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	15 c0       	rjmp	.+42     	; 0x19fe <_ZN7TwoWire5writeEh+0x56>
    19d4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN7TwoWire13txBufferIndexE>
    19d8:	e8 2f       	mov	r30, r24
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	e0 5f       	subi	r30, 0xF0	; 240
    19de:	fc 4f       	sbci	r31, 0xFC	; 252
    19e0:	99 81       	ldd	r25, Y+1	; 0x01
    19e2:	90 83       	st	Z, r25
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <_ZN7TwoWire13txBufferIndexE>
    19ea:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZN7TwoWire14txBufferLengthE>
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <_ZN7TwoWire5writeEh+0x52>
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <twi_transmit>
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	08 95       	ret

00001a06 <_ZN7TwoWireC1Ev>:
    1a06:	fc 01       	movw	r30, r24
    1a08:	13 82       	std	Z+3, r1	; 0x03
    1a0a:	12 82       	std	Z+2, r1	; 0x02
    1a0c:	88 ee       	ldi	r24, 0xE8	; 232
    1a0e:	93 e0       	ldi	r25, 0x03	; 3
    1a10:	a0 e0       	ldi	r26, 0x00	; 0
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	84 83       	std	Z+4, r24	; 0x04
    1a16:	95 83       	std	Z+5, r25	; 0x05
    1a18:	a6 83       	std	Z+6, r26	; 0x06
    1a1a:	b7 83       	std	Z+7, r27	; 0x07
    1a1c:	84 eb       	ldi	r24, 0xB4	; 180
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	08 95       	ret

00001a26 <_ZN7TwoWire5beginEv>:
    1a26:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <_ZN7TwoWire13rxBufferIndexE>
    1a2a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <_ZN7TwoWire14rxBufferLengthE>
    1a2e:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZN7TwoWire13txBufferIndexE>
    1a32:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZN7TwoWire14txBufferLengthE>
    1a36:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <twi_init>

00001a3a <_ZN7TwoWire8setClockEm>:
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	ba 01       	movw	r22, r20
    1a3e:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <twi_setFrequency>

00001a42 <_ZN7TwoWire17beginTransmissionEh>:
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZN7TwoWire12transmittingE>
    1a48:	60 93 30 03 	sts	0x0330, r22	; 0x800330 <_ZN7TwoWire9txAddressE>
    1a4c:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZN7TwoWire13txBufferIndexE>
    1a50:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZN7TwoWire14txBufferLengthE>
    1a54:	08 95       	ret

00001a56 <_ZN7TwoWire17beginTransmissionEi>:
    1a56:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <_ZN7TwoWire17beginTransmissionEh>

00001a5a <_ZN7TwoWire15endTransmissionEh>:
    1a5a:	0f 93       	push	r16
    1a5c:	06 2f       	mov	r16, r22
    1a5e:	21 e0       	ldi	r18, 0x01	; 1
    1a60:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <_ZN7TwoWire14txBufferLengthE>
    1a64:	60 e1       	ldi	r22, 0x10	; 16
    1a66:	73 e0       	ldi	r23, 0x03	; 3
    1a68:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZN7TwoWire9txAddressE>
    1a6c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <twi_writeTo>
    1a70:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZN7TwoWire13txBufferIndexE>
    1a74:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZN7TwoWire14txBufferLengthE>
    1a78:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <_ZN7TwoWire12transmittingE>
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <_ZN7TwoWire11requestFromEhhmhh>:
    1a80:	4f 92       	push	r4
    1a82:	5f 92       	push	r5
    1a84:	6f 92       	push	r6
    1a86:	7f 92       	push	r7
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	cf 92       	push	r12
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	5c 01       	movw	r10, r24
    1a9c:	f6 2e       	mov	r15, r22
    1a9e:	d4 2f       	mov	r29, r20
    1aa0:	28 01       	movw	r4, r16
    1aa2:	39 01       	movw	r6, r18
    1aa4:	ee 20       	and	r14, r14
    1aa6:	21 f1       	breq	.+72     	; 0x1af0 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    1aa8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN7TwoWire17beginTransmissionEh>
    1aac:	ce 2d       	mov	r28, r14
    1aae:	c4 30       	cpi	r28, 0x04	; 4
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1ab2:	c3 e0       	ldi	r28, 0x03	; 3
    1ab4:	c1 50       	subi	r28, 0x01	; 1
    1ab6:	c0 f0       	brcs	.+48     	; 0x1ae8 <_ZN7TwoWire11requestFromEhhmhh+0x68>
    1ab8:	28 e0       	ldi	r18, 0x08	; 8
    1aba:	c2 9f       	mul	r28, r18
    1abc:	c0 01       	movw	r24, r0
    1abe:	11 24       	eor	r1, r1
    1ac0:	a3 01       	movw	r20, r6
    1ac2:	92 01       	movw	r18, r4
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    1ac6:	56 95       	lsr	r21
    1ac8:	47 95       	ror	r20
    1aca:	37 95       	ror	r19
    1acc:	27 95       	ror	r18
    1ace:	8a 95       	dec	r24
    1ad0:	d2 f7       	brpl	.-12     	; 0x1ac6 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	b9 01       	movw	r22, r18
    1ad6:	d5 01       	movw	r26, r10
    1ad8:	ed 91       	ld	r30, X+
    1ada:	fc 91       	ld	r31, X
    1adc:	01 90       	ld	r0, Z+
    1ade:	f0 81       	ld	r31, Z
    1ae0:	e0 2d       	mov	r30, r0
    1ae2:	c5 01       	movw	r24, r10
    1ae4:	09 95       	icall
    1ae6:	e6 cf       	rjmp	.-52     	; 0x1ab4 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	c5 01       	movw	r24, r10
    1aec:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <_ZN7TwoWire15endTransmissionEh>
    1af0:	4d 2f       	mov	r20, r29
    1af2:	d1 32       	cpi	r29, 0x21	; 33
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <_ZN7TwoWire11requestFromEhhmhh+0x78>
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	2c 2d       	mov	r18, r12
    1afa:	63 e3       	ldi	r22, 0x33	; 51
    1afc:	73 e0       	ldi	r23, 0x03	; 3
    1afe:	8f 2d       	mov	r24, r15
    1b00:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <twi_readFrom>
    1b04:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <_ZN7TwoWire13rxBufferIndexE>
    1b08:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZN7TwoWire14rxBufferLengthE>
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	ff 90       	pop	r15
    1b16:	ef 90       	pop	r14
    1b18:	cf 90       	pop	r12
    1b1a:	bf 90       	pop	r11
    1b1c:	af 90       	pop	r10
    1b1e:	7f 90       	pop	r7
    1b20:	6f 90       	pop	r6
    1b22:	5f 90       	pop	r5
    1b24:	4f 90       	pop	r4
    1b26:	08 95       	ret

00001b28 <_ZN7TwoWire11requestFromEhhh>:
    1b28:	cf 92       	push	r12
    1b2a:	ef 92       	push	r14
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	c2 2e       	mov	r12, r18
    1b32:	e1 2c       	mov	r14, r1
    1b34:	00 e0       	ldi	r16, 0x00	; 0
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	98 01       	movw	r18, r16
    1b3a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_ZN7TwoWire11requestFromEhhmhh>
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	ef 90       	pop	r14
    1b44:	cf 90       	pop	r12
    1b46:	08 95       	ret

00001b48 <_ZN7TwoWire11requestFromEhh>:
    1b48:	21 e0       	ldi	r18, 0x01	; 1
    1b4a:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <_ZN7TwoWire11requestFromEhhh>

00001b4e <_ZN7TwoWire11requestFromEii>:
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <_ZN7TwoWire11requestFromEhhh>

00001b54 <_ZN7TwoWire15endTransmissionEv>:
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <_ZN7TwoWire15endTransmissionEh>

00001b5a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <_ZN7TwoWireC1Ev>

00001b62 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1b62:	08 95       	ret

00001b64 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1b64:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <twi_state>
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <twi_sendStop>
    1b6e:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_inRepStart>
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	82 e1       	ldi	r24, 0x12	; 18
    1b76:	0e 94 10 10 	call	0x2020	; 0x2020 <digitalWrite>
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	83 e1       	ldi	r24, 0x13	; 19
    1b7e:	0e 94 10 10 	call	0x2020	; 0x2020 <digitalWrite>
    1b82:	e9 eb       	ldi	r30, 0xB9	; 185
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8e 7f       	andi	r24, 0xFE	; 254
    1b8a:	80 83       	st	Z, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8d 7f       	andi	r24, 0xFD	; 253
    1b90:	80 83       	st	Z, r24
    1b92:	88 e4       	ldi	r24, 0x48	; 72
    1b94:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1b98:	85 e4       	ldi	r24, 0x45	; 69
    1b9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1b9e:	08 95       	ret

00001ba0 <twi_setFrequency>:
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	74 e2       	ldi	r23, 0x24	; 36
    1ba8:	84 ef       	ldi	r24, 0xF4	; 244
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
    1bb0:	da 01       	movw	r26, r20
    1bb2:	c9 01       	movw	r24, r18
    1bb4:	40 97       	sbiw	r24, 0x10	; 16
    1bb6:	a1 09       	sbc	r26, r1
    1bb8:	b1 09       	sbc	r27, r1
    1bba:	b6 95       	lsr	r27
    1bbc:	a7 95       	ror	r26
    1bbe:	97 95       	ror	r25
    1bc0:	87 95       	ror	r24
    1bc2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1bc6:	08 95       	ret

00001bc8 <twi_readFrom>:
    1bc8:	41 32       	cpi	r20, 0x21	; 33
    1bca:	08 f0       	brcs	.+2      	; 0x1bce <twi_readFrom+0x6>
    1bcc:	43 c0       	rjmp	.+134    	; 0x1c54 <twi_readFrom+0x8c>
    1bce:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <twi_state>
    1bd2:	91 11       	cpse	r25, r1
    1bd4:	fc cf       	rjmp	.-8      	; 0x1bce <twi_readFrom+0x6>
    1bd6:	91 e0       	ldi	r25, 0x01	; 1
    1bd8:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <twi_state>
    1bdc:	20 93 be 03 	sts	0x03BE, r18	; 0x8003be <twi_sendStop>
    1be0:	2f ef       	ldi	r18, 0xFF	; 255
    1be2:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <twi_error>
    1be6:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <twi_masterBufferIndex>
    1bea:	24 0f       	add	r18, r20
    1bec:	20 93 97 03 	sts	0x0397, r18	; 0x800397 <twi_masterBufferLength>
    1bf0:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <twi_slarw>
    1bf4:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <twi_slarw>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	89 2b       	or	r24, r25
    1bfc:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_slarw>
    1c00:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_inRepStart>
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	61 f4       	brne	.+24     	; 0x1c20 <twi_readFrom+0x58>
    1c08:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_inRepStart>
    1c0c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <twi_slarw>
    1c10:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c14:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c18:	83 fd       	sbrc	r24, 3
    1c1a:	f8 cf       	rjmp	.-16     	; 0x1c0c <twi_readFrom+0x44>
    1c1c:	85 ec       	ldi	r24, 0xC5	; 197
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <twi_readFrom+0x5a>
    1c20:	85 ee       	ldi	r24, 0xE5	; 229
    1c22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c26:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <twi_state>
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	e1 f3       	breq	.-8      	; 0x1c26 <twi_readFrom+0x5e>
    1c2e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1c32:	84 17       	cp	r24, r20
    1c34:	10 f4       	brcc	.+4      	; 0x1c3a <twi_readFrom+0x72>
    1c36:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1c3a:	a9 e9       	ldi	r26, 0x99	; 153
    1c3c:	b3 e0       	ldi	r27, 0x03	; 3
    1c3e:	96 2f       	mov	r25, r22
    1c40:	fb 01       	movw	r30, r22
    1c42:	8e 2f       	mov	r24, r30
    1c44:	89 1b       	sub	r24, r25
    1c46:	84 17       	cp	r24, r20
    1c48:	18 f4       	brcc	.+6      	; 0x1c50 <twi_readFrom+0x88>
    1c4a:	8d 91       	ld	r24, X+
    1c4c:	81 93       	st	Z+, r24
    1c4e:	f9 cf       	rjmp	.-14     	; 0x1c42 <twi_readFrom+0x7a>
    1c50:	84 2f       	mov	r24, r20
    1c52:	08 95       	ret
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <twi_writeTo>:
    1c58:	0f 93       	push	r16
    1c5a:	41 32       	cpi	r20, 0x21	; 33
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <twi_writeTo+0x8>
    1c5e:	4a c0       	rjmp	.+148    	; 0x1cf4 <twi_writeTo+0x9c>
    1c60:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <twi_state>
    1c64:	91 11       	cpse	r25, r1
    1c66:	fc cf       	rjmp	.-8      	; 0x1c60 <twi_writeTo+0x8>
    1c68:	32 e0       	ldi	r19, 0x02	; 2
    1c6a:	30 93 c0 03 	sts	0x03C0, r19	; 0x8003c0 <twi_state>
    1c6e:	00 93 be 03 	sts	0x03BE, r16	; 0x8003be <twi_sendStop>
    1c72:	3f ef       	ldi	r19, 0xFF	; 255
    1c74:	30 93 53 03 	sts	0x0353, r19	; 0x800353 <twi_error>
    1c78:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <twi_masterBufferIndex>
    1c7c:	40 93 97 03 	sts	0x0397, r20	; 0x800397 <twi_masterBufferLength>
    1c80:	56 2f       	mov	r21, r22
    1c82:	a9 e9       	ldi	r26, 0x99	; 153
    1c84:	b3 e0       	ldi	r27, 0x03	; 3
    1c86:	fb 01       	movw	r30, r22
    1c88:	3e 2f       	mov	r19, r30
    1c8a:	35 1b       	sub	r19, r21
    1c8c:	34 17       	cp	r19, r20
    1c8e:	18 f4       	brcc	.+6      	; 0x1c96 <twi_writeTo+0x3e>
    1c90:	31 91       	ld	r19, Z+
    1c92:	3d 93       	st	X+, r19
    1c94:	f9 cf       	rjmp	.-14     	; 0x1c88 <twi_writeTo+0x30>
    1c96:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <twi_slarw>
    1c9a:	30 91 bf 03 	lds	r19, 0x03BF	; 0x8003bf <twi_slarw>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	83 2b       	or	r24, r19
    1ca2:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_slarw>
    1ca6:	80 91 bd 03 	lds	r24, 0x03BD	; 0x8003bd <twi_inRepStart>
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	61 f4       	brne	.+24     	; 0x1cc6 <twi_writeTo+0x6e>
    1cae:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <twi_inRepStart>
    1cb2:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <twi_slarw>
    1cb6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1cba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1cbe:	83 fd       	sbrc	r24, 3
    1cc0:	f8 cf       	rjmp	.-16     	; 0x1cb2 <twi_writeTo+0x5a>
    1cc2:	85 ec       	ldi	r24, 0xC5	; 197
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <twi_writeTo+0x70>
    1cc6:	85 ee       	ldi	r24, 0xE5	; 229
    1cc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ccc:	22 23       	and	r18, r18
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <twi_writeTo+0x80>
    1cd0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <twi_state>
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	d1 f3       	breq	.-12     	; 0x1ccc <twi_writeTo+0x74>
    1cd8:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_error>
    1cdc:	8f 3f       	cpi	r24, 0xFF	; 255
    1cde:	79 f0       	breq	.+30     	; 0x1cfe <twi_writeTo+0xa6>
    1ce0:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_error>
    1ce4:	80 32       	cpi	r24, 0x20	; 32
    1ce6:	41 f0       	breq	.+16     	; 0x1cf8 <twi_writeTo+0xa0>
    1ce8:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_error>
    1cec:	80 33       	cpi	r24, 0x30	; 48
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <twi_writeTo+0xa4>
    1cf0:	94 e0       	ldi	r25, 0x04	; 4
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <twi_writeTo+0xa6>
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <twi_writeTo+0xa6>
    1cf8:	92 e0       	ldi	r25, 0x02	; 2
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <twi_writeTo+0xa6>
    1cfc:	93 e0       	ldi	r25, 0x03	; 3
    1cfe:	89 2f       	mov	r24, r25
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <twi_transmit>:
    1d04:	40 91 75 03 	lds	r20, 0x0375	; 0x800375 <twi_txBufferLength>
    1d08:	26 2f       	mov	r18, r22
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	24 0f       	add	r18, r20
    1d0e:	31 1d       	adc	r19, r1
    1d10:	21 32       	cpi	r18, 0x21	; 33
    1d12:	31 05       	cpc	r19, r1
    1d14:	dc f4       	brge	.+54     	; 0x1d4c <twi_transmit+0x48>
    1d16:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <twi_state>
    1d1a:	24 30       	cpi	r18, 0x04	; 4
    1d1c:	c9 f4       	brne	.+50     	; 0x1d50 <twi_transmit+0x4c>
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	86 17       	cp	r24, r22
    1d26:	58 f4       	brcc	.+22     	; 0x1d3e <twi_transmit+0x3a>
    1d28:	30 91 75 03 	lds	r19, 0x0375	; 0x800375 <twi_txBufferLength>
    1d2c:	21 91       	ld	r18, Z+
    1d2e:	dc 01       	movw	r26, r24
    1d30:	a9 58       	subi	r26, 0x89	; 137
    1d32:	bc 4f       	sbci	r27, 0xFC	; 252
    1d34:	a3 0f       	add	r26, r19
    1d36:	b1 1d       	adc	r27, r1
    1d38:	2c 93       	st	X, r18
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	f3 cf       	rjmp	.-26     	; 0x1d24 <twi_transmit+0x20>
    1d3e:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_txBufferLength>
    1d42:	68 0f       	add	r22, r24
    1d44:	60 93 75 03 	sts	0x0375, r22	; 0x800375 <twi_txBufferLength>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	08 95       	ret
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	08 95       	ret
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	08 95       	ret

00001d54 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1d54:	85 ed       	ldi	r24, 0xD5	; 213
    1d56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1d5a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d5e:	84 fd       	sbrc	r24, 4
    1d60:	fc cf       	rjmp	.-8      	; 0x1d5a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1d62:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <twi_state>
    1d66:	08 95       	ret

00001d68 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1d68:	85 ec       	ldi	r24, 0xC5	; 197
    1d6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    1d6e:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <twi_state>
    1d72:	08 95       	ret

00001d74 <__vector_24>:
}

ISR(TWI_vect)
{
    1d74:	1f 92       	push	r1
    1d76:	0f 92       	push	r0
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	0f 92       	push	r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	2f 93       	push	r18
    1d80:	3f 93       	push	r19
    1d82:	4f 93       	push	r20
    1d84:	5f 93       	push	r21
    1d86:	6f 93       	push	r22
    1d88:	7f 93       	push	r23
    1d8a:	8f 93       	push	r24
    1d8c:	9f 93       	push	r25
    1d8e:	af 93       	push	r26
    1d90:	bf 93       	push	r27
    1d92:	ef 93       	push	r30
    1d94:	ff 93       	push	r31
  switch(TW_STATUS){
    1d96:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1d9a:	88 7f       	andi	r24, 0xF8	; 248
    1d9c:	80 36       	cpi	r24, 0x60	; 96
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <__vector_24+0x2e>
    1da0:	9e c0       	rjmp	.+316    	; 0x1ede <__vector_24+0x16a>
    1da2:	78 f5       	brcc	.+94     	; 0x1e02 <__vector_24+0x8e>
    1da4:	88 32       	cpi	r24, 0x28	; 40
    1da6:	09 f4       	brne	.+2      	; 0x1daa <__vector_24+0x36>
    1da8:	5d c0       	rjmp	.+186    	; 0x1e64 <__vector_24+0xf0>
    1daa:	90 f4       	brcc	.+36     	; 0x1dd0 <__vector_24+0x5c>
    1dac:	80 31       	cpi	r24, 0x10	; 16
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <__vector_24+0x3e>
    1db0:	56 c0       	rjmp	.+172    	; 0x1e5e <__vector_24+0xea>
    1db2:	38 f4       	brcc	.+14     	; 0x1dc2 <__vector_24+0x4e>
    1db4:	88 23       	and	r24, r24
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__vector_24+0x46>
    1db8:	f5 c0       	rjmp	.+490    	; 0x1fa4 <__vector_24+0x230>
    1dba:	88 30       	cpi	r24, 0x08	; 8
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <__vector_24+0x4c>
    1dbe:	4f c0       	rjmp	.+158    	; 0x1e5e <__vector_24+0xea>
    1dc0:	f5 c0       	rjmp	.+490    	; 0x1fac <__vector_24+0x238>
    1dc2:	88 31       	cpi	r24, 0x18	; 24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <__vector_24+0x54>
    1dc6:	4e c0       	rjmp	.+156    	; 0x1e64 <__vector_24+0xf0>
    1dc8:	80 32       	cpi	r24, 0x20	; 32
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__vector_24+0x5a>
    1dcc:	5f c0       	rjmp	.+190    	; 0x1e8c <__vector_24+0x118>
    1dce:	ee c0       	rjmp	.+476    	; 0x1fac <__vector_24+0x238>
    1dd0:	80 34       	cpi	r24, 0x40	; 64
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <__vector_24+0x62>
    1dd4:	6a c0       	rjmp	.+212    	; 0x1eaa <__vector_24+0x136>
    1dd6:	58 f4       	brcc	.+22     	; 0x1dee <__vector_24+0x7a>
    1dd8:	80 33       	cpi	r24, 0x30	; 48
    1dda:	09 f4       	brne	.+2      	; 0x1dde <__vector_24+0x6a>
    1ddc:	57 c0       	rjmp	.+174    	; 0x1e8c <__vector_24+0x118>
    1dde:	88 33       	cpi	r24, 0x38	; 56
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <__vector_24+0x70>
    1de2:	e4 c0       	rjmp	.+456    	; 0x1fac <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1de4:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <twi_error>
      twi_releaseBus();
    1de8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <twi_releaseBus>
      break;
    1dec:	df c0       	rjmp	.+446    	; 0x1fac <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1dee:	80 35       	cpi	r24, 0x50	; 80
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <__vector_24+0x80>
    1df2:	4f c0       	rjmp	.+158    	; 0x1e92 <__vector_24+0x11e>
    1df4:	88 35       	cpi	r24, 0x58	; 88
    1df6:	09 f4       	brne	.+2      	; 0x1dfa <__vector_24+0x86>
    1df8:	5d c0       	rjmp	.+186    	; 0x1eb4 <__vector_24+0x140>
    1dfa:	88 34       	cpi	r24, 0x48	; 72
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <__vector_24+0x8c>
    1dfe:	d6 c0       	rjmp	.+428    	; 0x1fac <__vector_24+0x238>
    1e00:	d3 c0       	rjmp	.+422    	; 0x1fa8 <__vector_24+0x234>
    1e02:	88 39       	cpi	r24, 0x98	; 152
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <__vector_24+0x94>
    1e06:	c4 c0       	rjmp	.+392    	; 0x1f90 <__vector_24+0x21c>
    1e08:	a8 f4       	brcc	.+42     	; 0x1e34 <__vector_24+0xc0>
    1e0a:	88 37       	cpi	r24, 0x78	; 120
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <__vector_24+0x9c>
    1e0e:	67 c0       	rjmp	.+206    	; 0x1ede <__vector_24+0x16a>
    1e10:	38 f4       	brcc	.+14     	; 0x1e20 <__vector_24+0xac>
    1e12:	88 36       	cpi	r24, 0x68	; 104
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <__vector_24+0xa4>
    1e16:	63 c0       	rjmp	.+198    	; 0x1ede <__vector_24+0x16a>
    1e18:	80 37       	cpi	r24, 0x70	; 112
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <__vector_24+0xaa>
    1e1c:	60 c0       	rjmp	.+192    	; 0x1ede <__vector_24+0x16a>
    1e1e:	c6 c0       	rjmp	.+396    	; 0x1fac <__vector_24+0x238>
    1e20:	88 38       	cpi	r24, 0x88	; 136
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <__vector_24+0xb2>
    1e24:	b5 c0       	rjmp	.+362    	; 0x1f90 <__vector_24+0x21c>
    1e26:	80 39       	cpi	r24, 0x90	; 144
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <__vector_24+0xb8>
    1e2a:	5f c0       	rjmp	.+190    	; 0x1eea <__vector_24+0x176>
    1e2c:	80 38       	cpi	r24, 0x80	; 128
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <__vector_24+0xbe>
    1e30:	bd c0       	rjmp	.+378    	; 0x1fac <__vector_24+0x238>
    1e32:	5b c0       	rjmp	.+182    	; 0x1eea <__vector_24+0x176>
    1e34:	80 3b       	cpi	r24, 0xB0	; 176
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <__vector_24+0xc6>
    1e38:	83 c0       	rjmp	.+262    	; 0x1f40 <__vector_24+0x1cc>
    1e3a:	38 f4       	brcc	.+14     	; 0x1e4a <__vector_24+0xd6>
    1e3c:	80 3a       	cpi	r24, 0xA0	; 160
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <__vector_24+0xce>
    1e40:	66 c0       	rjmp	.+204    	; 0x1f0e <__vector_24+0x19a>
    1e42:	88 3a       	cpi	r24, 0xA8	; 168
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <__vector_24+0xd4>
    1e46:	7c c0       	rjmp	.+248    	; 0x1f40 <__vector_24+0x1cc>
    1e48:	b1 c0       	rjmp	.+354    	; 0x1fac <__vector_24+0x238>
    1e4a:	80 3c       	cpi	r24, 0xC0	; 192
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <__vector_24+0xdc>
    1e4e:	a4 c0       	rjmp	.+328    	; 0x1f98 <__vector_24+0x224>
    1e50:	88 3c       	cpi	r24, 0xC8	; 200
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <__vector_24+0xe2>
    1e54:	a1 c0       	rjmp	.+322    	; 0x1f98 <__vector_24+0x224>
    1e56:	88 3b       	cpi	r24, 0xB8	; 184
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <__vector_24+0xe8>
    1e5a:	87 c0       	rjmp	.+270    	; 0x1f6a <__vector_24+0x1f6>
    1e5c:	a7 c0       	rjmp	.+334    	; 0x1fac <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1e5e:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <twi_slarw>
    1e62:	10 c0       	rjmp	.+32     	; 0x1e84 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1e64:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1e68:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <twi_masterBufferLength>
    1e6c:	98 17       	cp	r25, r24
    1e6e:	70 f5       	brcc	.+92     	; 0x1ecc <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1e70:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	8e 0f       	add	r24, r30
    1e78:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_masterBufferIndex>
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	e7 56       	subi	r30, 0x67	; 103
    1e80:	fc 4f       	sbci	r31, 0xFC	; 252
    1e82:	80 81       	ld	r24, Z
    1e84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1e88:	85 ec       	ldi	r24, 0xC5	; 197
    1e8a:	83 c0       	rjmp	.+262    	; 0x1f92 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e8c:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <twi_error>
    1e90:	8b c0       	rjmp	.+278    	; 0x1fa8 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1e92:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	8e 0f       	add	r24, r30
    1e9a:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_masterBufferIndex>
    1e9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	e7 56       	subi	r30, 0x67	; 103
    1ea6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ea8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1eaa:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1eae:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <twi_masterBufferLength>
    1eb2:	6b c0       	rjmp	.+214    	; 0x1f8a <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1eb4:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <twi_masterBufferIndex>
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	8e 0f       	add	r24, r30
    1ebc:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_masterBufferIndex>
    1ec0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	e7 56       	subi	r30, 0x67	; 103
    1ec8:	fc 4f       	sbci	r31, 0xFC	; 252
    1eca:	80 83       	st	Z, r24
	if (twi_sendStop)
    1ecc:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <twi_sendStop>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	6a c0       	rjmp	.+212    	; 0x1fa8 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1eda:	84 ea       	ldi	r24, 0xA4	; 164
    1edc:	5e c0       	rjmp	.+188    	; 0x1f9a <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1ee4:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <twi_rxBufferIndex>
    1ee8:	cf cf       	rjmp	.-98     	; 0x1e88 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1eea:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_rxBufferIndex>
    1eee:	80 32       	cpi	r24, 0x20	; 32
    1ef0:	08 f0       	brcs	.+2      	; 0x1ef4 <__vector_24+0x180>
    1ef2:	4e c0       	rjmp	.+156    	; 0x1f90 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1ef4:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <twi_rxBufferIndex>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	8e 0f       	add	r24, r30
    1efc:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <twi_rxBufferIndex>
    1f00:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	eb 5a       	subi	r30, 0xAB	; 171
    1f08:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0a:	80 83       	st	Z, r24
    1f0c:	bd cf       	rjmp	.-134    	; 0x1e88 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1f0e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1f12:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_rxBufferIndex>
    1f16:	80 32       	cpi	r24, 0x20	; 32
    1f18:	30 f4       	brcc	.+12     	; 0x1f26 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1f1a:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <twi_rxBufferIndex>
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	eb 5a       	subi	r30, 0xAB	; 171
    1f22:	fc 4f       	sbci	r31, 0xFC	; 252
    1f24:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1f26:	60 91 54 03 	lds	r22, 0x0354	; 0x800354 <twi_rxBufferIndex>
    1f2a:	70 e0       	ldi	r23, 0x00	; 0
    1f2c:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <twi_onSlaveReceive>
    1f30:	f0 91 ba 03 	lds	r31, 0x03BA	; 0x8003ba <twi_onSlaveReceive+0x1>
    1f34:	85 e5       	ldi	r24, 0x55	; 85
    1f36:	93 e0       	ldi	r25, 0x03	; 3
    1f38:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1f3a:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <twi_rxBufferIndex>
      break;
    1f3e:	36 c0       	rjmp	.+108    	; 0x1fac <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1f40:	84 e0       	ldi	r24, 0x04	; 4
    1f42:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1f46:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1f4a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1f4e:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <twi_onSlaveTransmit>
    1f52:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <twi_onSlaveTransmit+0x1>
    1f56:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1f58:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_txBufferLength>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    1f66:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1f6a:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_txBufferIndex>
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	8e 0f       	add	r24, r30
    1f72:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_txBufferIndex>
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	e9 58       	subi	r30, 0x89	; 137
    1f7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f82:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_txBufferIndex>
    1f86:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_txBufferLength>
    1f8a:	98 17       	cp	r25, r24
    1f8c:	08 f4       	brcc	.+2      	; 0x1f90 <__vector_24+0x21c>
    1f8e:	7c cf       	rjmp	.-264    	; 0x1e88 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f90:	85 e8       	ldi	r24, 0x85	; 133
    1f92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f96:	0a c0       	rjmp	.+20     	; 0x1fac <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f98:	85 ec       	ldi	r24, 0xC5	; 197
    1f9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1f9e:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <twi_state>
      break;
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1fa4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <twi_error>
      twi_stop();
    1fa8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <twi_stop>
      break;
  }
}
    1fac:	ff 91       	pop	r31
    1fae:	ef 91       	pop	r30
    1fb0:	bf 91       	pop	r27
    1fb2:	af 91       	pop	r26
    1fb4:	9f 91       	pop	r25
    1fb6:	8f 91       	pop	r24
    1fb8:	7f 91       	pop	r23
    1fba:	6f 91       	pop	r22
    1fbc:	5f 91       	pop	r21
    1fbe:	4f 91       	pop	r20
    1fc0:	3f 91       	pop	r19
    1fc2:	2f 91       	pop	r18
    1fc4:	0f 90       	pop	r0
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	0f 90       	pop	r0
    1fca:	1f 90       	pop	r1
    1fcc:	18 95       	reti

00001fce <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
    1fce:	83 30       	cpi	r24, 0x03	; 3
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <turnOffPWM+0x24>
    1fd2:	28 f4       	brcc	.+10     	; 0x1fde <turnOffPWM+0x10>
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	99 f0       	breq	.+38     	; 0x1ffe <turnOffPWM+0x30>
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	a1 f0       	breq	.+40     	; 0x2004 <turnOffPWM+0x36>
    1fdc:	08 95       	ret
    1fde:	87 30       	cpi	r24, 0x07	; 7
    1fe0:	a9 f0       	breq	.+42     	; 0x200c <turnOffPWM+0x3e>
    1fe2:	88 30       	cpi	r24, 0x08	; 8
    1fe4:	b9 f0       	breq	.+46     	; 0x2014 <turnOffPWM+0x46>
    1fe6:	84 30       	cpi	r24, 0x04	; 4
    1fe8:	d1 f4       	brne	.+52     	; 0x201e <turnOffPWM+0x50>
    1fea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1fee:	8f 7d       	andi	r24, 0xDF	; 223
    1ff0:	03 c0       	rjmp	.+6      	; 0x1ff8 <turnOffPWM+0x2a>
    1ff2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ff6:	8f 77       	andi	r24, 0x7F	; 127
    1ff8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1ffc:	08 95       	ret
    1ffe:	84 b5       	in	r24, 0x24	; 36
    2000:	8f 77       	andi	r24, 0x7F	; 127
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <turnOffPWM+0x3a>
    2004:	84 b5       	in	r24, 0x24	; 36
    2006:	8f 7d       	andi	r24, 0xDF	; 223
    2008:	84 bd       	out	0x24, r24	; 36
    200a:	08 95       	ret
    200c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2010:	8f 77       	andi	r24, 0x7F	; 127
    2012:	03 c0       	rjmp	.+6      	; 0x201a <turnOffPWM+0x4c>
    2014:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2018:	8f 7d       	andi	r24, 0xDF	; 223
    201a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    201e:	08 95       	ret

00002020 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	f9 01       	movw	r30, r18
    202c:	e8 59       	subi	r30, 0x98	; 152
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2032:	f9 01       	movw	r30, r18
    2034:	e4 58       	subi	r30, 0x84	; 132
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    203a:	f9 01       	movw	r30, r18
    203c:	e0 57       	subi	r30, 0x70	; 112
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2042:	cc 23       	and	r28, r28
    2044:	c1 f0       	breq	.+48     	; 0x2076 <digitalWrite+0x56>
    2046:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2048:	81 11       	cpse	r24, r1
    204a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <turnOffPWM>

	out = portOutputRegister(port);
    204e:	ec 2f       	mov	r30, r28
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	ec 55       	subi	r30, 0x5C	; 92
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	a5 91       	lpm	r26, Z+
    205c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    205e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2060:	f8 94       	cli

	if (val == LOW) {
    2062:	11 11       	cpse	r17, r1
    2064:	04 c0       	rjmp	.+8      	; 0x206e <digitalWrite+0x4e>
		*out &= ~bit;
    2066:	8c 91       	ld	r24, X
    2068:	d0 95       	com	r29
    206a:	d8 23       	and	r29, r24
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <digitalWrite+0x52>
	} else {
		*out |= bit;
    206e:	ec 91       	ld	r30, X
    2070:	de 2b       	or	r29, r30
    2072:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2074:	9f bf       	out	0x3f, r25	; 63
}
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	1f 91       	pop	r17
    207c:	08 95       	ret

0000207e <__subsf3>:
    207e:	50 58       	subi	r21, 0x80	; 128

00002080 <__addsf3>:
    2080:	bb 27       	eor	r27, r27
    2082:	aa 27       	eor	r26, r26
    2084:	0e 94 57 10 	call	0x20ae	; 0x20ae <__addsf3x>
    2088:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_round>
    208c:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscA>
    2090:	38 f0       	brcs	.+14     	; 0x20a0 <__addsf3+0x20>
    2092:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscB>
    2096:	20 f0       	brcs	.+8      	; 0x20a0 <__addsf3+0x20>
    2098:	39 f4       	brne	.+14     	; 0x20a8 <__addsf3+0x28>
    209a:	9f 3f       	cpi	r25, 0xFF	; 255
    209c:	19 f4       	brne	.+6      	; 0x20a4 <__addsf3+0x24>
    209e:	26 f4       	brtc	.+8      	; 0x20a8 <__addsf3+0x28>
    20a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_nan>
    20a4:	0e f4       	brtc	.+2      	; 0x20a8 <__addsf3+0x28>
    20a6:	e0 95       	com	r30
    20a8:	e7 fb       	bst	r30, 7
    20aa:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>

000020ae <__addsf3x>:
    20ae:	e9 2f       	mov	r30, r25
    20b0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_split3>
    20b4:	58 f3       	brcs	.-42     	; 0x208c <__addsf3+0xc>
    20b6:	ba 17       	cp	r27, r26
    20b8:	62 07       	cpc	r22, r18
    20ba:	73 07       	cpc	r23, r19
    20bc:	84 07       	cpc	r24, r20
    20be:	95 07       	cpc	r25, r21
    20c0:	20 f0       	brcs	.+8      	; 0x20ca <__addsf3x+0x1c>
    20c2:	79 f4       	brne	.+30     	; 0x20e2 <__addsf3x+0x34>
    20c4:	a6 f5       	brtc	.+104    	; 0x212e <__addsf3x+0x80>
    20c6:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_zero>
    20ca:	0e f4       	brtc	.+2      	; 0x20ce <__addsf3x+0x20>
    20cc:	e0 95       	com	r30
    20ce:	0b 2e       	mov	r0, r27
    20d0:	ba 2f       	mov	r27, r26
    20d2:	a0 2d       	mov	r26, r0
    20d4:	0b 01       	movw	r0, r22
    20d6:	b9 01       	movw	r22, r18
    20d8:	90 01       	movw	r18, r0
    20da:	0c 01       	movw	r0, r24
    20dc:	ca 01       	movw	r24, r20
    20de:	a0 01       	movw	r20, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	ff 27       	eor	r31, r31
    20e4:	59 1b       	sub	r21, r25
    20e6:	99 f0       	breq	.+38     	; 0x210e <__addsf3x+0x60>
    20e8:	59 3f       	cpi	r21, 0xF9	; 249
    20ea:	50 f4       	brcc	.+20     	; 0x2100 <__addsf3x+0x52>
    20ec:	50 3e       	cpi	r21, 0xE0	; 224
    20ee:	68 f1       	brcs	.+90     	; 0x214a <__addsf3x+0x9c>
    20f0:	1a 16       	cp	r1, r26
    20f2:	f0 40       	sbci	r31, 0x00	; 0
    20f4:	a2 2f       	mov	r26, r18
    20f6:	23 2f       	mov	r18, r19
    20f8:	34 2f       	mov	r19, r20
    20fa:	44 27       	eor	r20, r20
    20fc:	58 5f       	subi	r21, 0xF8	; 248
    20fe:	f3 cf       	rjmp	.-26     	; 0x20e6 <__addsf3x+0x38>
    2100:	46 95       	lsr	r20
    2102:	37 95       	ror	r19
    2104:	27 95       	ror	r18
    2106:	a7 95       	ror	r26
    2108:	f0 40       	sbci	r31, 0x00	; 0
    210a:	53 95       	inc	r21
    210c:	c9 f7       	brne	.-14     	; 0x2100 <__addsf3x+0x52>
    210e:	7e f4       	brtc	.+30     	; 0x212e <__addsf3x+0x80>
    2110:	1f 16       	cp	r1, r31
    2112:	ba 0b       	sbc	r27, r26
    2114:	62 0b       	sbc	r22, r18
    2116:	73 0b       	sbc	r23, r19
    2118:	84 0b       	sbc	r24, r20
    211a:	ba f0       	brmi	.+46     	; 0x214a <__addsf3x+0x9c>
    211c:	91 50       	subi	r25, 0x01	; 1
    211e:	a1 f0       	breq	.+40     	; 0x2148 <__addsf3x+0x9a>
    2120:	ff 0f       	add	r31, r31
    2122:	bb 1f       	adc	r27, r27
    2124:	66 1f       	adc	r22, r22
    2126:	77 1f       	adc	r23, r23
    2128:	88 1f       	adc	r24, r24
    212a:	c2 f7       	brpl	.-16     	; 0x211c <__addsf3x+0x6e>
    212c:	0e c0       	rjmp	.+28     	; 0x214a <__addsf3x+0x9c>
    212e:	ba 0f       	add	r27, r26
    2130:	62 1f       	adc	r22, r18
    2132:	73 1f       	adc	r23, r19
    2134:	84 1f       	adc	r24, r20
    2136:	48 f4       	brcc	.+18     	; 0x214a <__addsf3x+0x9c>
    2138:	87 95       	ror	r24
    213a:	77 95       	ror	r23
    213c:	67 95       	ror	r22
    213e:	b7 95       	ror	r27
    2140:	f7 95       	ror	r31
    2142:	9e 3f       	cpi	r25, 0xFE	; 254
    2144:	08 f0       	brcs	.+2      	; 0x2148 <__addsf3x+0x9a>
    2146:	b0 cf       	rjmp	.-160    	; 0x20a8 <__addsf3+0x28>
    2148:	93 95       	inc	r25
    214a:	88 0f       	add	r24, r24
    214c:	08 f0       	brcs	.+2      	; 0x2150 <__addsf3x+0xa2>
    214e:	99 27       	eor	r25, r25
    2150:	ee 0f       	add	r30, r30
    2152:	97 95       	ror	r25
    2154:	87 95       	ror	r24
    2156:	08 95       	ret

00002158 <__mulsf3>:
    2158:	0e 94 bf 10 	call	0x217e	; 0x217e <__mulsf3x>
    215c:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_round>
    2160:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscA>
    2164:	38 f0       	brcs	.+14     	; 0x2174 <__mulsf3+0x1c>
    2166:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscB>
    216a:	20 f0       	brcs	.+8      	; 0x2174 <__mulsf3+0x1c>
    216c:	95 23       	and	r25, r21
    216e:	11 f0       	breq	.+4      	; 0x2174 <__mulsf3+0x1c>
    2170:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
    2174:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_nan>
    2178:	11 24       	eor	r1, r1
    217a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_szero>

0000217e <__mulsf3x>:
    217e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__fp_split3>
    2182:	70 f3       	brcs	.-36     	; 0x2160 <__mulsf3+0x8>

00002184 <__mulsf3_pse>:
    2184:	95 9f       	mul	r25, r21
    2186:	c1 f3       	breq	.-16     	; 0x2178 <__mulsf3+0x20>
    2188:	95 0f       	add	r25, r21
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	55 1f       	adc	r21, r21
    218e:	62 9f       	mul	r22, r18
    2190:	f0 01       	movw	r30, r0
    2192:	72 9f       	mul	r23, r18
    2194:	bb 27       	eor	r27, r27
    2196:	f0 0d       	add	r31, r0
    2198:	b1 1d       	adc	r27, r1
    219a:	63 9f       	mul	r22, r19
    219c:	aa 27       	eor	r26, r26
    219e:	f0 0d       	add	r31, r0
    21a0:	b1 1d       	adc	r27, r1
    21a2:	aa 1f       	adc	r26, r26
    21a4:	64 9f       	mul	r22, r20
    21a6:	66 27       	eor	r22, r22
    21a8:	b0 0d       	add	r27, r0
    21aa:	a1 1d       	adc	r26, r1
    21ac:	66 1f       	adc	r22, r22
    21ae:	82 9f       	mul	r24, r18
    21b0:	22 27       	eor	r18, r18
    21b2:	b0 0d       	add	r27, r0
    21b4:	a1 1d       	adc	r26, r1
    21b6:	62 1f       	adc	r22, r18
    21b8:	73 9f       	mul	r23, r19
    21ba:	b0 0d       	add	r27, r0
    21bc:	a1 1d       	adc	r26, r1
    21be:	62 1f       	adc	r22, r18
    21c0:	83 9f       	mul	r24, r19
    21c2:	a0 0d       	add	r26, r0
    21c4:	61 1d       	adc	r22, r1
    21c6:	22 1f       	adc	r18, r18
    21c8:	74 9f       	mul	r23, r20
    21ca:	33 27       	eor	r19, r19
    21cc:	a0 0d       	add	r26, r0
    21ce:	61 1d       	adc	r22, r1
    21d0:	23 1f       	adc	r18, r19
    21d2:	84 9f       	mul	r24, r20
    21d4:	60 0d       	add	r22, r0
    21d6:	21 1d       	adc	r18, r1
    21d8:	82 2f       	mov	r24, r18
    21da:	76 2f       	mov	r23, r22
    21dc:	6a 2f       	mov	r22, r26
    21de:	11 24       	eor	r1, r1
    21e0:	9f 57       	subi	r25, 0x7F	; 127
    21e2:	50 40       	sbci	r21, 0x00	; 0
    21e4:	9a f0       	brmi	.+38     	; 0x220c <__mulsf3_pse+0x88>
    21e6:	f1 f0       	breq	.+60     	; 0x2224 <__mulsf3_pse+0xa0>
    21e8:	88 23       	and	r24, r24
    21ea:	4a f0       	brmi	.+18     	; 0x21fe <__mulsf3_pse+0x7a>
    21ec:	ee 0f       	add	r30, r30
    21ee:	ff 1f       	adc	r31, r31
    21f0:	bb 1f       	adc	r27, r27
    21f2:	66 1f       	adc	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	91 50       	subi	r25, 0x01	; 1
    21fa:	50 40       	sbci	r21, 0x00	; 0
    21fc:	a9 f7       	brne	.-22     	; 0x21e8 <__mulsf3_pse+0x64>
    21fe:	9e 3f       	cpi	r25, 0xFE	; 254
    2200:	51 05       	cpc	r21, r1
    2202:	80 f0       	brcs	.+32     	; 0x2224 <__mulsf3_pse+0xa0>
    2204:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
    2208:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_szero>
    220c:	5f 3f       	cpi	r21, 0xFF	; 255
    220e:	e4 f3       	brlt	.-8      	; 0x2208 <__mulsf3_pse+0x84>
    2210:	98 3e       	cpi	r25, 0xE8	; 232
    2212:	d4 f3       	brlt	.-12     	; 0x2208 <__mulsf3_pse+0x84>
    2214:	86 95       	lsr	r24
    2216:	77 95       	ror	r23
    2218:	67 95       	ror	r22
    221a:	b7 95       	ror	r27
    221c:	f7 95       	ror	r31
    221e:	e7 95       	ror	r30
    2220:	9f 5f       	subi	r25, 0xFF	; 255
    2222:	c1 f7       	brne	.-16     	; 0x2214 <__mulsf3_pse+0x90>
    2224:	fe 2b       	or	r31, r30
    2226:	88 0f       	add	r24, r24
    2228:	91 1d       	adc	r25, r1
    222a:	96 95       	lsr	r25
    222c:	87 95       	ror	r24
    222e:	97 f9       	bld	r25, 7
    2230:	08 95       	ret

00002232 <__unordsf2>:
    2232:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_cmp>
    2236:	88 0b       	sbc	r24, r24
    2238:	99 0b       	sbc	r25, r25
    223a:	08 95       	ret

0000223c <__divmodhi4>:
    223c:	97 fb       	bst	r25, 7
    223e:	07 2e       	mov	r0, r23
    2240:	16 f4       	brtc	.+4      	; 0x2246 <__divmodhi4+0xa>
    2242:	00 94       	com	r0
    2244:	07 d0       	rcall	.+14     	; 0x2254 <__divmodhi4_neg1>
    2246:	77 fd       	sbrc	r23, 7
    2248:	09 d0       	rcall	.+18     	; 0x225c <__divmodhi4_neg2>
    224a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__udivmodhi4>
    224e:	07 fc       	sbrc	r0, 7
    2250:	05 d0       	rcall	.+10     	; 0x225c <__divmodhi4_neg2>
    2252:	3e f4       	brtc	.+14     	; 0x2262 <__divmodhi4_exit>

00002254 <__divmodhi4_neg1>:
    2254:	90 95       	com	r25
    2256:	81 95       	neg	r24
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	08 95       	ret

0000225c <__divmodhi4_neg2>:
    225c:	70 95       	com	r23
    225e:	61 95       	neg	r22
    2260:	7f 4f       	sbci	r23, 0xFF	; 255

00002262 <__divmodhi4_exit>:
    2262:	08 95       	ret

00002264 <__udivmodsi4>:
    2264:	a1 e2       	ldi	r26, 0x21	; 33
    2266:	1a 2e       	mov	r1, r26
    2268:	aa 1b       	sub	r26, r26
    226a:	bb 1b       	sub	r27, r27
    226c:	fd 01       	movw	r30, r26
    226e:	0d c0       	rjmp	.+26     	; 0x228a <__udivmodsi4_ep>

00002270 <__udivmodsi4_loop>:
    2270:	aa 1f       	adc	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	ee 1f       	adc	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	a2 17       	cp	r26, r18
    227a:	b3 07       	cpc	r27, r19
    227c:	e4 07       	cpc	r30, r20
    227e:	f5 07       	cpc	r31, r21
    2280:	20 f0       	brcs	.+8      	; 0x228a <__udivmodsi4_ep>
    2282:	a2 1b       	sub	r26, r18
    2284:	b3 0b       	sbc	r27, r19
    2286:	e4 0b       	sbc	r30, r20
    2288:	f5 0b       	sbc	r31, r21

0000228a <__udivmodsi4_ep>:
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	1a 94       	dec	r1
    2294:	69 f7       	brne	.-38     	; 0x2270 <__udivmodsi4_loop>
    2296:	60 95       	com	r22
    2298:	70 95       	com	r23
    229a:	80 95       	com	r24
    229c:	90 95       	com	r25
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	bd 01       	movw	r22, r26
    22a4:	cf 01       	movw	r24, r30
    22a6:	08 95       	ret

000022a8 <__mulhisi3>:
    22a8:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__umulhisi3>
    22ac:	33 23       	and	r19, r19
    22ae:	12 f4       	brpl	.+4      	; 0x22b4 <__mulhisi3+0xc>
    22b0:	8a 1b       	sub	r24, r26
    22b2:	9b 0b       	sbc	r25, r27
    22b4:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__usmulhisi3_tail>

000022b8 <__umulhisi3>:
    22b8:	a2 9f       	mul	r26, r18
    22ba:	b0 01       	movw	r22, r0
    22bc:	b3 9f       	mul	r27, r19
    22be:	c0 01       	movw	r24, r0
    22c0:	a3 9f       	mul	r26, r19
    22c2:	70 0d       	add	r23, r0
    22c4:	81 1d       	adc	r24, r1
    22c6:	11 24       	eor	r1, r1
    22c8:	91 1d       	adc	r25, r1
    22ca:	b2 9f       	mul	r27, r18
    22cc:	70 0d       	add	r23, r0
    22ce:	81 1d       	adc	r24, r1
    22d0:	11 24       	eor	r1, r1
    22d2:	91 1d       	adc	r25, r1
    22d4:	08 95       	ret

000022d6 <__usmulhisi3>:
    22d6:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__umulhisi3>

000022da <__usmulhisi3_tail>:
    22da:	b7 ff       	sbrs	r27, 7
    22dc:	08 95       	ret
    22de:	82 1b       	sub	r24, r18
    22e0:	93 0b       	sbc	r25, r19
    22e2:	08 95       	ret

000022e4 <__udivmodhi4>:
    22e4:	aa 1b       	sub	r26, r26
    22e6:	bb 1b       	sub	r27, r27
    22e8:	51 e1       	ldi	r21, 0x11	; 17
    22ea:	07 c0       	rjmp	.+14     	; 0x22fa <__udivmodhi4_ep>

000022ec <__udivmodhi4_loop>:
    22ec:	aa 1f       	adc	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	a6 17       	cp	r26, r22
    22f2:	b7 07       	cpc	r27, r23
    22f4:	10 f0       	brcs	.+4      	; 0x22fa <__udivmodhi4_ep>
    22f6:	a6 1b       	sub	r26, r22
    22f8:	b7 0b       	sbc	r27, r23

000022fa <__udivmodhi4_ep>:
    22fa:	88 1f       	adc	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	5a 95       	dec	r21
    2300:	a9 f7       	brne	.-22     	; 0x22ec <__udivmodhi4_loop>
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	08 95       	ret

0000230c <__tablejump2__>:
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	05 90       	lpm	r0, Z+
    2312:	f4 91       	lpm	r31, Z
    2314:	e0 2d       	mov	r30, r0
    2316:	09 94       	ijmp

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
